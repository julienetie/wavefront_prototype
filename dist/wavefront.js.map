{"version":3,"file":"wavefront.js","sources":["../src/helpers.js","../src/abstract.js","../src/assembly.js","../src/cache.js","../src/render.js","../src/command-methods.js","../src/render-partial.js","../src/initialize.js","../src/logical-methods.js","../src/tags.js"],"sourcesContent":["export const isPlaneObject = value => ({}).toString.call(value) === '[object Object]';\nexport const isVNode = value => value.hasOwnProperty('t');\nexport const removeChildren = parentNode => {\n    while (parentNode.firstChild) {\n        parentNode.removeChild(parentNode.firstChild);\n    }\n}\n\n/** \n * Filter by loop \n * @param {Array} arr \n * @param {Function} callback \n **/\nexport const filter = (arr, callback) => {\n    const store = [];\n    const arrLength = arr.length;\n    for (let i = 0; i < arrLength; i++) {\n        if (callback(arr[i])) {\n            store.push(arr[i]);\n        }\n    }\n    return store;\n}\n\n/** \n * Inserts a Node before a reference node.\n */\nexport const insertBefore = (parent, newNode, refNode) => parent.insertBefore(newNode, refNode);\n\n/** \n * Inserts a Node after a reference node.\n */\nexport const insertAfter = (parent, newElement, refNode) => {\n    if (parent.lastChild === refNode) {\n        parent.appendChild(newElement);\n    } else {\n        parent.insertBefore(newElement, refNode.nextSibling);\n    }\n};\n\n\n/** \n * @param {string} t - Tag name \n * @param {Object|string} at - Attributes | Primative\n * @param {Array} ch - Children \n * @param {Boolean} isSVG \n */\nexport const vNode = (t, at, ch, isSVG) => {\n    switch (t) {\n        case 'primitive':\n            return { t: 'TEXT', val: at };\n        case 'comment':\n            return { t: 'COM', val: at };\n        default:\n            return isSVG ? {\n                t,\n                at,\n                ch,\n                svg: true\n            } : {\n                t,\n                at,\n                ch\n            };\n    }\n}","import { vNode } from './helpers';\n\nconst getChildNodesAsArray = (childNodes, whitespaceRules) => {\n    const ignoreTrim = !(whitespaceRules === 'ignore-trim');\n    const childNodesArr = [];\n    const childNodesLength = childNodes.length;\n\n    for (let i = 0; i < childNodesLength; i++) {\n        if (childNodes[i].nodeType === 3 & ignoreTrim) {\n            /*\n             *  \"\\t\" TAB \\u0009\n             *  \"\\n\" LF  \\u000A\n             *  \"\\r\" CR  \\u000D\n             *  \" \"  SPC \\u0020\n             */\n            if (childNodes[i].nodeValue === childNodes[i].nodeValue.replace(/^\\s+|\\s+$/g, '')) {\n                childNodesArr.push(abstract(childNodes[i], whitespaceRules));\n            }\n        } else {\n            childNodesArr.push(abstract(childNodes[i], whitespaceRules));\n        }\n    }\n\n    return childNodesArr;\n}\n\n\nconst getDefinedAttributes = (element) => {\n    const attributes = element.attributes;\n    const definedAttributes = {};\n    const attributesLength = attributes === null || attributes === undefined ? 0 : attributes.length;\n\n    for (let i = 0; i < attributesLength; i++) {\n        const attribute = attributes[i];\n        const attributeName = attributes[i].name;\n        const style = {};\n        const isStyle = attributeName === 'style';\n\n        if (isStyle) {\n            const cssText = element.style.cssText; // The interpreted value \n            const cssList = cssText.length > 0 ? cssText.split(';') : ['']; //last item is ignored.\n            const cssListLength = cssList.length;\n\n            for (let j = 0; j < cssListLength - 1; j++) {\n                const part = cssList[j].split(': ');\n                style[part[0].trim()] = part[1];\n            }\n        }\n        definedAttributes[attribute.name] = isStyle ? style : attribute.value;\n    }\n\n    return definedAttributes;\n}\n\n\nconst abstract = (interfaceSelector, whitespaceRules = 'trim') => {\n    const element = typeof interfaceSelector.nodeType === 'number' ? interfaceSelector : document.querySelector(interfaceSelector);\n    const definedAttributes = getDefinedAttributes(element);\n    const isSVG = element instanceof SVGElement;\n    const childNodes = getChildNodesAsArray(element.childNodes, whitespaceRules);\n\n    switch (element.nodeType) {\n        case 1:\n          console.log(element.tagName)\n            return vNode(\n                element.tagName,\n                definedAttributes,\n                childNodes,\n                isSVG\n            );\n        case 3:\n              console.log(element.nodeValue)\n            return vNode(\n                'primitive',\n                element.nodeValue\n            );\n        case 8:\n            console.log(element.nodeValue)\n            return vNode(\n                'comment',\n                element.nodeValue\n            );\n    }\n}\n\nexport default abstract;","import {\n    isPlaneObject,\n    vNode \n} from './helpers';\n\n/** \n Assembly is the mechanics of the tag functions. \n A Wavefront template is a set of nested functions\n which act similar to recursion. \n\n The deepest nested tag of the youngest index is\n the first executed tag function.\n**/\nexport default (tagName, nodeType) => {\n    const isSVG = nodeType === true;\n    return (...args) => {\n        const tagNameStr = `${tagName}`;\n        let attributes;\n        let childNodes = [];\n        const argsLength = args.length;\n        let i;\n\n        for (i = 0; i < argsLength; i++) {\n            const item = args[i] || {};\n            let isItemObject = isPlaneObject(item);\n            let isItemVnode = item.hasOwnProperty('t');\n\n            // Check if item is a plane object = attribute.\n            if (isItemObject && !isItemVnode) {\n                attributes = item;\n                continue;\n            }\n\n\n            // Check if item is an array = group of child elements.\n            if (Array.isArray(item)) {\n                childNodes = [...childNodes, ...item];\n                continue;\n            }\n\n            // check if item is not an object, array or function = child element.\n            if (isItemObject && isItemVnode || (typeof item === 'string' || typeof item === 'number')) {\n                childNodes.push(item);\n                continue;\n            }\n\n\n            if (item instanceof Node) {\n                //@TODO Convert item to vNode and push;\n                childNodes.push({ el: item });\n            }\n        }\n\n        const childNodesLength = childNodes.length;\n\n\n        for (i = 0; i < childNodesLength; ++i) {\n            const childNode = childNodes[i];\n            if (typeof childNode === 'string' || typeof childNode === 'number') {\n                const isComment = childNode[0] === '@';\n                const type =   isComment ? 'comment' : 'primitive';\n                const value = isComment ? childNode.slice(1) : childNode;\n                childNodes[i] = vNode(type, value, null, isSVG);\n            }\n        }\n\n        return vNode(tagNameStr, attributes, childNodes, isSVG);\n    }\n}","/** \n * Shared cache accessible between modules. \n */\nconst cache = {\n\tvDOM: null,\n\trootElement: null,\n\tfragment: document.createDocumentFragment()\n};\n\nexport default cache;\n","import cache from './cache';\n\nconst SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\nconst createAndAppendNode = (frag, node) => {\n    const isSVG = node.svg === true;\n\n    // TEXT_NODE        3\n    if (node.t === 'TEXT') {\n        const textNode = document.createTextNode(node.val);\n        frag.appendChild(textNode);\n        return;\n    }\n    // // COMMENT_NODE     8\n    if (node.t === 'COM') {\n        const commentNode = document.createComment(node.val);\n        frag.appendChild(commentNode);\n        return;\n    }\n    const notAnElement = !node.hasOwnProperty('el');\n\n    let element;\n\n    if (notAnElement) {\n        // ELEMENT_NODE     1\n        element = isSVG ? document.createElementNS(SVG_NAMESPACE, node.t) : document.createElement(node.t);\n\n        // Add attributes\n        if (node.at) {\n            const attributes = node.at;\n            const attributeKeys = Object.keys(attributes);\n            const attributesLength = attributeKeys.length;\n\n            for (let i = 0; i < attributesLength; i++) {\n                const attributeKey = attributeKeys[i];\n\n                // Standard dataset syntax.\n                if (attributeKey.indexOf('data-') === 0) {\n                    const dataKey = attributeKey.replace('data-', '');\n                    element.dataset[dataKey] = attributes[attributeKey];\n                    continue;\n                }\n                // Shorthand dataset syntax.\n                if (attributeKey.indexOf('d-') === 0) {\n                    const dataKey = attributeKey.replace('d-', '');\n                    element.dataset[dataKey] = attributes[attributeKey];\n                    continue;\n                }\n                // Props: _\n                if (attributeKey[0] === '_') {\n                    const cleanKey = attributeKey.replace('_', '');\n                    element[cleanKey] = attributes[attributeKey];\n                    continue;\n                }\n\n                const attributeValue = attributes[attributeKey];\n\n                switch (attributeKey) {\n                    case 'e':\n                    case 'event':\n                        element.addEventListener(...attributeValue);\n                        break;\n                    case '$':\n                    case 'style':\n                        Object.assign(element.style, attributeValue);\n                        break;\n                    case 'c':\n                    case 'class':\n                        element.className = attributes.class;\n                        break;\n                    default:\n                        element.setAttribute(attributeKey, attributeValue);\n                        break;\n                }\n            }\n        }\n    } else {\n        element = node.el;\n    }\n    // Add children\n    frag.appendChild(element);\n\n    if (notAnElement && Array.isArray(node.ch)) {\n        node.ch.forEach(childNode => {\n            createAndAppendNode(element, childNode)\n        });\n    }\n}\n\nconst updateDOM = (renderFragment, replace) => {\n    const fragmentClone = document.importNode(renderFragment, true);\n    // console.log('fragmentClone',fragmentClone)\n    // console.log('cache.rootElement.parentElement',cache.rootElement.parentElement)\n    // console.log('replace',replace)\n\n    if (replace) {\n        const parent = cache.rootElement.parentElement;\n        parent.insertBefore(fragmentClone, cache.rootElement)\n        cache.rootElement.parentElement.removeChild(cache.rootElement);\n        cache.rootElement = fragmentClone;\n    } else {\n        cache.rootElement.appendChild(fragmentClone)\n    }\n\n}\n\nexport default (initalRootElement, vNode, isPartial, replace) => {\n    // Cache root element \n    if (cache.rootElement === null) {\n        cache.rootElement = initalRootElement;\n    }\n\n    // Creates a new fragment for partials but uses \n    // the fragment cache for the inital render.\n    const renderFragment = isPartial === true ? document.createDocumentFragment() : cache.fragment;\n    const node = isPartial === true ? vNode : cache.vDOM;\n\n    /** \n     * Dummy wrapper to treat a non-wrap node as wrapped.\n     */\n    const dummyVDOM = {\n        \"t\": \"div\",\n        \"id\": 2,\n        \"at\": {\n            \"id\": \"dummy\"\n        },\n        \"ch\": node\n    }\n\n\n    if (Array.isArray(node)) {\n        createAndAppendNode(renderFragment, dummyVDOM);\n        const dummy = renderFragment.firstElementChild;\n        const innerNodes = Array.from(dummy.childNodes);\n        const innerNodesLength = innerNodes.length;\n        const outerNodeList = [];\n\n        for (let i = 0; i < innerNodesLength; i++) {\n            renderFragment.appendChild(innerNodes[i])\n        }\n\n        renderFragment.removeChild(dummy);\n\n        requestAnimationFrame(() => {\n            updateDOM(renderFragment, replace)\n        });\n    } else {\n\n        // Wrapped element\n        createAndAppendNode(renderFragment, node);\n        requestAnimationFrame(() => {\n            if (!isPartial) {\n                updateDOM(renderFragment, replace)\n            }\n            return;\n        });\n    }\n\n    return renderFragment;\n}","\n\n// @todo Insert need to be arguments\n\n/** \n * \n */\nexport const removeChilds = function(node) {\n    let last;\n    while (last = node.lastChild) {\n        node.removeChild(last);\n    };\n};\n\n\n\nexport const ibIa1 = (nodeType, queriedParent, newDOMNode, childNode) => {\n    if (nodeType === 't') {\n        // insert(queriedParent, newDOMNode, childNode);\n        insert(\n            queriedParent.parentElement,\n            newDOMNode,\n            queriedParent\n        );\n    } else {\n        insert(\n            queriedParent.parentElement,\n            newDOMNode,\n            queriedParent\n        );\n    }\n}\n\nexport const ibIa2 = (nodeType, childNodesLength, childNode, offset, queriedParent, newDOMNode) => {\n    if (nodeType === 't') {\n        let textNode;\n        for (let i = 0; i < childNodesLength; i++) {\n            const childNode = childNodes[i];\n            if (childNode.nodeType === 3) {\n                textNode = offset === 0 ? childNode : childNodes[i + offset];\n                break;\n            }\n        }\n        insert(\n            queriedParent,\n            newDOMNode,\n            textNode\n        );\n    } else {\n        insert(\n            queriedParent,\n            newDOMNode,\n            queriedParent.children[index + offset]\n        );\n    }\n}\n\nexport const r1 = (type, selector, nodeType, newDOMNode, CMDHasMany, queriedParent) => {\n    if (type === 'all') {\n        const children = queriedParent.querySelectorAll(selector);\n        const childrenLength = children.length;\n        const clones = [];\n\n        if (nodeType !== 't') {\n            for (let i = 0; i < childrenLength; i++) {\n                clones.push(newDOMNode.cloneNode(true));\n            }\n        }\n\n        for (let i = 0; i < childrenLength; i++) {\n            if (nodeType === 't') {\n                children[i].innerHTML = newDOMNode;\n            } else {\n                children[i].replaceWith(clones[i]);\n            }\n        }\n    } else {\n        if (!CMDHasMany) {\n            console.log('REMOVE')\n            console.log('newDOMNode', newDOMNode)\n            console.log('queriedParent', queriedParent)\n            queriedParent.parentElement.replaceChild(newDOMNode, queriedParent);\n        }\n    }\n}\n\n\nexport const r2 = (nodeType, queriedParent, offset, newDOMNode, refNode, childNode) => {\n    switch (nodeType) {\n        case 'e':\n            let refNode = queriedParent.children[index + offset];\n            queriedParent.replaceChild(newDOMNode, refNode);\n            return;\n        case 'n':\n            refNode = queriedParent.childNodes[index + offset];\n            queriedParent.replaceChild(newDOMNode, refNode);\n            return;\n        case 't':\n            let textNode;\n            for (let i = 0; i < childNodesLength; i++) {\n                const childNode = childNodes[i];\n                if (childNode.nodeType === 3) {\n                    textNode = offset === 0 ? childNode : childNodes[i + offset];\n                    break;\n                }\n            }\n            queriedParent.replaceChild(newDOMNode, textNode);\n            return;\n    }\n}\n\n\n\nexport const replaceNode = (type, queriedParent, query, newDOMNode) => {\n    const child = queriedParent.querySelector(query);\n    const childRelative = type ? child[type] : child;\n    childRelative.replaceWith(newDOMNode);\n}\n\n\nexport const rm = (nodeType, type, queriedParent, selector, removeType, offset) => {\n\n    if (nodeType === 't') {\n\n        if (type === 'single') {\n            // const children = queriedParent.querySelectorAll(selector);\n            queriedParent.style.backgroundColor = 'red'\n            const childNodes = queriedParent.childNodes\n            const childNodesLength = childNodes.length;\n\n            let textNode;\n            for (let i = 0; i < childNodesLength; i++) {\n                const childNode = childNodes[i];\n                if (childNode.nodeType === 3) {\n                    // textNode = offset === 0 ? childNode : childNodes[i + offset];\n                    console.log('childNodes', childNode)\n                    childNode.remove(childNodes[i + offset]);\n                    return;\n                }\n            }\n            return;\n        }\n\n        if (type === 'all') {\n            console.log('RM ALL')\n            console.log(nodeType, type, queriedParent, selector, removeType, offset)\n            const matchingSelectors = queriedParent.querySelectorAll(selector);\n            const matchingSelectorsLength = matchingSelectors.length;\n            for (let j = 0; j < matchingSelectorsLength; j++) {\n                const childNodes = matchingSelectors[j].childNodes\n                const childNodesLength = childNodes.length;\n\n                for (let i = 0; i < childNodesLength; i++) {\n                    const childNode = childNodes[i];\n                    if (childNode.nodeType === 3) {\n                        matchingSelectors[j].remove(childNodes[i + offset]);\n                    }\n                }\n            }\n            return;\n        }\n    }\n\n\n    if (type === 'all') {\n        const children = queriedParent.querySelectorAll(selector);\n        const childrenLength = children.length;\n\n        switch (removeType) {\n            case 'selected':\n                for (let i = 0; i < childrenLength; i++) {\n                    const child = children[i];\n                    child.style.backgroundColor = 'pink'\n                    child.remove(child);\n                }\n                return;\n            case 'before':\n                console.log('BEFORE')\n                for (let i = 0; i < childrenLength; i++) {\n                    const child = children[i];\n                    if (i > 0) {\n                        child.remove(child.previousSibling);\n                    }\n                }\n                return;\n            case 'after':\n                for (let i = 0; i < childrenLength; i++) {\n                    const child = children[i];\n                    if (i < childrenLength - 1) {\n                        const nextSibling = child.nextSibling;\n                        nextSibling.remove(nextSibling);\n                    }\n                }\n                return;\n        }\n\n    } else {\n        switch (removeType) {\n            case 'selected':\n                queriedParent.parentElement.removeChild(queriedParent);\n                return;\n            case 'before':\n                const previousSibling = queriedParent.previousSibling;\n                if (!!previousSibling) {\n                    queriedParent.parentElement.removeChild(previousSibling);\n                }\n                return;\n            case 'after':\n                const nextSibling = queriedParent.nextSibling;\n                if (!!nextSibling) {\n                    queriedParent.parentElement.removeChild(nextSibling);\n                }\n                return;\n        }\n    }\n}","import {\n    removeChildren,\n    insertBefore,\n    insertAfter\n} from './helpers';\nimport cache from './cache';\nimport render from './render';\nimport {\n    removeChilds, \n    ibIa1,\n    ibIa2,\n    r1,\n    r2,\n    replaceNode,\n    rm\n} from './command-methods';\n/**\n * \n *\n */\nconst updateCachedFragmentByCommand = (selector, CMD, queriedParent, newDOMNode, type) => {\n             console.log('updateCachedFragmentByCommand',newDOMNode)\n    const CMDList = CMD.split(' ');\n    const CMDListLength = CMDList.length;\n    const CMDHasMany = CMDListLength > 1;\n    const lastCommand = CMDList[CMDListLength - 1];\n    const thirdCommand = CMDList[2];\n    const secondCommand = CMDList[1];\n    const action = CMDList[0];\n\n    const childNodes = queriedParent.childNodes;\n    const childNodesLength = childNodes.length;\n    const childLengthAsIndex = childNodesLength - 1;\n\n    // offset. \n    const hasOffset = CMDHasMany ? lastCommand[0] === '+' : false;\n    let initialOffset = hasOffset ? parseInt(lastCommand.slice(1), 10) : 0;\n\n    // index.\n    const hasIndex = !!thirdCommand ? thirdCommand[0] === 'i' : false;\n    let initalIndex = hasIndex ? parseInt(thirdCommand.slice(1), 10) : 0;\n\n    // Limit the index to the child nodes length.\n    const index = initalIndex + offset > childLengthAsIndex ? childLengthAsIndex : initalIndex;\n    const offset = index + initialOffset > childLengthAsIndex ? 0 : initialOffset;\n\n    // nodeType.\n    const nodeType = !!secondCommand ? secondCommand[0] : 'e';\n\n    // query.\n    const hasQuery = !!secondCommand ? secondCommand.indexOf('=') >= 0 : false;\n    const query = hasQuery ? secondCommand.split('=')[1] : null;\n\n    /** \n     * NodeType|Index|Offset|Query\n     *  CMDcode is a binary representation of \n     * the presetnt commands. \n     * Action is present by default.\n     */\n    const CMDcode = parseInt([\n        1,\n        hasIndex + 0,\n        hasOffset + 0,\n        hasQuery + 0\n    ].join(''), 2);\n\n    const ibIa = CMDcode => {\n        switch (CMDcode) {\n            case 0: // ib\n            case 8: // ib e\n                ibIa1(\n                    nodeType,\n                    queriedParent,\n                    newDOMNode\n                );\n                return;\n            case 10: // ib e +1\n            case 12: // ib e i0\n            case 14: // ib e i0 +1\n                ibIa2(\n                    nodeType,\n                    childNodesLength,\n                    undefined,\n                    offset,\n                    queriedParent,\n                    newDOMNode\n                );\n                return;\n        }\n    }\n\n    const r = (CMDcode) => {\n        switch (CMDcode) {\n            case 8: // r e\n            console.log('newDOMNode',newDOMNode)\n                r1(\n                    type,\n                    selector,\n                    nodeType,\n                    newDOMNode,\n                    CMDHasMany,\n                    queriedParent\n                );\n                return;\n            case 12:\n            case 14:\n                r2(\n                    nodeType,\n                    queriedParent,\n                    offset,\n                    newDOMNode,\n                    refNode,\n                    childNode\n                );\n                return;\n            case 9:\n                replaceNode(null, queriedParent, query, newDOMNode);\n                return;\n        }\n    }\n\n\n    switch (action) {\n        /**\n         * Insert Before Insert After\n         * Insert before|after without an index will insert the new node\n         * before the parent.\n         */\n        case 'ib':\n        case 'ia':\n            ibIa(CMDcode);\n            return;\n            /** \n                Replace Node\n            **/\n        case 'r':\n            r(CMDcode);\n            break;\n        case 'rb':\n            if (CMDcode === 9) {\n                replaceNode(\n                    'previousSibling',\n                    queriedParent,\n                    query,\n                    newDOMNode\n                );\n            }\n            break;\n        case 'ra':\n            if (CMDcode === 9) {\n                replaceNode(\n                    'nextSibling',\n                    queriedParent,\n                    query,\n                    newDOMNode\n                );\n            }\n            return;\n        case 'rm':\n\n\n            rm(nodeType, type, queriedParent, selector, 'selected', offset);\n            return;\n        case 'rmb':\n            rm(nodeType, type, queriedParent, selector, 'before', offset);\n            return;\n        case 'rma':\n            rm(nodeType, type, queriedParent, selector, 'after', offset);\n            return;\n    }\n}\n\n\n/** \n * Updates the cached fragment by creating the new node \n * and then replacing the childNodes. Updating by command\n * will only modify portions of the cached DOM tree.\n * @param {string} query - The selector and Wavefront query.  \n * @param {Object|string} newVNode - The new node or text\n * @param {Boolean} type - Truthy for .all()\n */\nconst updateCachedFragment = (query, newVNode, type) => {\n    let parts;\n    const hasCommand = (parts = query.split('|')).length === 2;\n    const selector = parts[0];\n    const command = parts[1];\n\n    // The .all method uses the fragment for querySelectorAll and the queried node for querySelector\n    const cachedNode = type === 'all' ? cache.fragment : cache.fragment.querySelector(selector);\n    // When using `|r t` with .all() a string value will be expected.  \n    const newDOMNode = typeof newVNode === 'string' ? newVNode : render(undefined, newVNode, true, false);\n    console.log('newDOMNode', newDOMNode)\n    if (hasCommand) {\n        updateCachedFragmentByCommand(selector, command, cachedNode, newDOMNode, type);\n    } else {\n        removeChildren(cachedNode);\n        // Append the new node to the cached fragment.\n        cachedNode.appendChild(newDOMNode);\n    }\n}\n\n\nconst partialRenderInner = (partialNodes, type) => {\n    console.log('partialNodes', partialNodes)\n    const partialNodesKeys = Object.keys(partialNodes);\n    const partialNodesLength = partialNodesKeys.length;\n\n    for (let i = 0; i < partialNodesLength; i++) {\n        const partialNodeKey = partialNodesKeys[i];\n        const newVNode = partialNodes[partialNodeKey];\n        updateCachedFragment(partialNodeKey, newVNode, type);\n    }\n    // // Render the DOM with the updated cachedFragment.\n    removeChildren(cache.rootElement);\n    const fragmentClone = document.importNode(cache.fragment, true);\n\n    cache.rootElement.appendChild(fragmentClone);\n\n\n}\n\nconst renderPartial = (partialNodes) => partialRenderInner(partialNodes, 'single');\nrenderPartial.all = (partialNodes) => partialRenderInner(partialNodes, 'all');\n\nexport default renderPartial;","import { isVNode, removeChildren } from './helpers';\nimport renderPartial from './render-partial';\nimport cache from './cache';\nimport render from './render';\n\nexport default (rootSelector, vNode, replace) => {\n    // allow a string or element as a querySelector value.\n    const container = rootSelector instanceof Element ? rootSelector : document.querySelector(rootSelector);\n\n    // Shallowly validate vNode.\n    const initalVNode = isVNode(vNode) || Array.isArray(vNode) ? vNode : false;\n\n    if (initalVNode === false) {\n        throw new Error(`vNode ${cache.vDOM} is not valid`);\n    }\n\n    // Cache valid vDOM\n    cache.vDOM = initalVNode;\n    // Empty the container\n\n    if (replace === true) {\n        render(container, false, undefined, replace);\n    } else {\n        removeChildren(container);\n        // Render the inital virual DOM and cache the selectors.\n        render(container, false, undefined, replace);\n    }\n    return renderPartial;\n}","import { isPlaneObject, filter} from './helpers';\n\n/** \n * The or method explicitly defines a condition between an array of nodes. \n * @param {Array} vNodes - An array of vNodes \n * @param {Number|Array} switch - A number or series of inidcators (as an array) of what elements to display.\n * @exclude {Boolean} exclude - \n * \n */\nexport const or = (vNodes, conditions, exclude) => {\n    const filteredVNodes = [];\n    const filteredIndexes = [];\n\n    // Return the vNode of a given index.\n    if (typeof conditions === 'number') {\n        return vNodes[conditions];\n    }\n\n\n    // Ensure toggle is an array. \n    const toggle = typeof conditions === 'string' ? [conditions] : conditions;\n\n\n    // Non-operational.\n    if (!Array.isArray(toggle) || toggle.length === 0) {\n        return vNodes;\n    }\n\n    // Define conditions required.\n    const classes = filter(toggle, e => e.indexOf('.') > -1);\n    const classesLength = classes.length\n    const ids = filter(toggle, e => e.indexOf('#') === 0);\n    const tags = filter(toggle, e => /^[a-z0-9]+$/i.test(e));\n    const children = filter(toggle, e => e.indexOf('~') === 0);\n    const indexes = filter(toggle, e => typeof e === 'number');\n    const vNodesLength = vNodes.length;\n\n    for (let i = 0; i < vNodesLength; i++) {\n        const vNode = vNodes[i];\n        const attributes = vNode.at;\n\n        // Check class.\n        if (classesLength > 0) {\n              for (let j = 0; j < classesLength; j++) {\n                  if (attributes.class.includes(classes[j].slice(1))) {\n                    filteredIndexes.push(i);\n                }\n              }\n        }\n\n        // Check ids.\n        if (ids.length > 0) {\n            ids.forEach(c => {\n                if (attributes.id === c.slice(1)) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n\n\n        // Check tags.\n        if (tags.length > 0) {\n            tags.forEach(c => {\n                if (vNode.t.toUpperCase() === c.toUpperCase()) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n\n\n        // Check children.\n        if (children.length > 0) {\n            children.forEach(x => {\n                const childrenLength = vNode.ch.filter(c => c.t !== 'TEXT' && c.t !== 'COM').length;\n                if (childrenLength == x.slice(1)) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n    }\n\n\n    // Remove duplicate indexes.\n    const indexList = [...(new Set(filteredIndexes))];\n\n    if (exclude === true) {\n        return filter(vNodes, (item, i) => indexList.indexOf(i) === -1);\n    } else {\n        indexList.forEach(index => {\n            filteredVNodes.push(vNodes[index]);\n        });\n        return filteredVNodes;\n    }\n}\n\n\n\n/** \n * or is used when you explicitly want the to inidicate\n * that an item is being looped by n times or via data\n * \n * @param {Object|Array} vNodes \n * @param {*} Data \n */\nexport const loop = (vNodes, data) => {\n    const groupVnodes = Array.isArray(vNodes);\n    const hasNumber = typeof data === 'number';\n\n    if (hasNumber) {\n        const loopedVnodes = [];\n        const singleVnode = isPlaneObject(vNodes);\n\n        // Single vnode looped by an integer.\n        if (singleVnode) {\n            for (let i = 0; i < data; i++) {\n                loopedVnodes.push(vNodes);\n            }\n        }\n\n        // Grouped vnode looped by an integer.\n        if (groupVnodes) {\n            for (let i = 0; i < data; i++) {\n                loopedVnodes.push(...vNodes);\n            }\n        }\n        return loopedVnodes;\n    } else {\n        if (typeof vNodes === 'function') {\n            return vNodes(data)\n\n            if (!Array.isArray(loopedVnodes)) {\n                throw new Error('loop() should return an Array of vnodes');\n            }\n        }\n    }\n}","import abstract from './abstract';\nimport assembly from './assembly';\nimport initialize from './initialize';\nimport { loop, or } from './logical-methods';\n\n\n// HTML Elements.\nconst tags = ({\n    a: assembly('a'),\n    abbr: assembly('abbr'),\n    abstract, \n    address: assembly('address'),\n    area: assembly('area'),\n    article: assembly('article'),\n    aside: assembly('aside'),\n    assembly, \n    audio: assembly('audio'),\n    childNodes: assembly('childNodes'),\n    base: assembly('base'),\n    bdi: assembly('bdi'),\n    bdo: assembly('bdo'),\n    blockquote: assembly('blockquote'),\n    body: assembly('body'),\n    br: assembly('br'),\n    button: assembly('button'),\n    canvas: assembly('canvas'),\n    caption: assembly('caption'),\n    cite: assembly('cite'),\n    code: assembly('code'),\n    col: assembly('col'),\n    colgroup: assembly('colgroup'),\n    command: assembly('command'),\n    dd: assembly('dd'),\n    del: assembly('del'),\n    dfn: assembly('dfn'),\n    div: assembly('div'),\n    dl: assembly('dl'),\n    doctype: assembly('doctype'),\n    dt: assembly('dt'),\n    em: assembly('em'),\n    embed: assembly('embed'),\n    fieldset: assembly('fieldset'),\n    figcaption: assembly('figcaption'),\n    figure: assembly('figure'),\n    footer: assembly('footer'),\n    form: assembly('form'),\n    h1: assembly('h1'),\n    h2: assembly('h2'),\n    h3: assembly('h3'),\n    h4: assembly('h4'),\n    h5: assembly('h5'),\n    h6: assembly('h6'),\n    header: assembly('header'),\n    hgroup: assembly('hgroup'),\n    hr: assembly('hr'),\n    html: assembly('html'),\n    i: assembly('i'),\n    iframe: assembly('iframe'),\n    img: assembly('img'),\n    initialize,\n    input: assembly('input'),\n    ins: assembly('ins'),\n    kbd: assembly('kbd'),\n    keygen: assembly('keygen'),\n    label: assembly('label'),\n    legend: assembly('legend'),\n    li: assembly('li'),\n    link: assembly('link'),\n    loop,\n    map: assembly('map'),\n    mark: assembly('mark'),\n    menu: assembly('menu'),\n    meta: assembly('meta'),\n    nav: assembly('nav'),\n    noscript: assembly('noscript'),\n    object: assembly('object'),\n    ol: assembly('ol'),\n    optgroup: assembly('optgroup'),\n    option: assembly('option'),\n    or,\n    p: assembly('p'),\n    param: assembly('param'),\n    pre: assembly('pre'),\n    progress: assembly('progress'),\n    q: assembly('q'),\n    rp: assembly('rp'),\n    rt: assembly('rt'),\n    ruby: assembly('ruby'),\n    s: assembly('s'),\n    samp: assembly('samp'),\n    script: assembly('script'),\n    section: assembly('section'),\n    select: assembly('select'),\n    small: assembly('small'),\n    source: assembly('source'),\n    span: assembly('span'),\n    strong: assembly('strong'),\n    style: assembly('style'),\n    sub: assembly('sub'),\n    sup: assembly('sup'),\n    table: assembly('table'),\n    tbody: assembly('tbody'),\n    td: assembly('td'),\n    textarea: assembly('textarea'),\n    tfoot: assembly('tfoot'),\n    th: assembly('th'),\n    thead: assembly('thead'),\n    title: assembly('title'),\n    tr: assembly('tr'),\n    ul: assembly('ul'),\n    Var: assembly('var'), // First capital\n    video: assembly('video'),\n\n    // SVG Elements.\n    svg: assembly('svg', true),\n    altGlyph: assembly('altGlyph', true),\n    altGlyphDef: assembly('altGlyphDef', true),\n    altGlyphItem: assembly('altGlyphItem', true),\n    animate: assembly('animate'),\n    animateColor: assembly('animateColor', true),\n    animateMotion: assembly('animateMotion', true),\n    animateTransform: assembly('animateTransform', true),\n    animation: assembly('animation', true),\n    circle: assembly('circle', true),\n    clipPath: assembly('clipPath', true),\n    colorProfile: assembly('color-profile', true), // color-profile\n    cursor: assembly('cursor', true),\n    defs: assembly('defs', true),\n    desc: assembly('desc', true),\n    discard: assembly('discard', true),\n    ellipse: assembly('ellipse', true),\n    feBlend: assembly('feBlend', true),\n    feColorMatrix: assembly('feComposite', true),\n    feComponentTransfer: assembly('feComponentTransfer', true),\n    feComposite: assembly('feComposite', true),\n    feConvolveMatrix: assembly('feConvolveMatrix', true),\n    feDiffuseLighting: assembly('feDiffuseLighting', true),\n    feDisplacementMap: assembly('feDistantLight', true),\n    feDistantLight: assembly('feDistantLight', true),\n    feDropShadow: assembly('feDropShadow', true),\n    feFlood: assembly('feFlood', true),\n    feFuncA: assembly('feFuncA', true),\n    feFuncB: assembly('feFuncB', true),\n    feFuncG: assembly('feFuncG', true),\n    feFuncR: assembly('feFuncR', true),\n    feGaussianBlur: assembly('feGaussianBlur', true),\n    feImage: assembly('feImage', true),\n    feMerge: assembly('feMerge', true),\n    feMergeNode: assembly('feMergeNode', true),\n    feMorphology: assembly('feMorphology', true),\n    feOffset: assembly('feOffset', true),\n    fePointLight: assembly('fePointLight', true),\n    feSpecularLighting: assembly('feSpecularLighting', true),\n    feSpotLight: assembly('feSpotLight', true),\n    feTile: assembly('feTile', true),\n    feTurbulence: assembly('feTurbulence', true),\n    filter: assembly('filter', true),\n    font: assembly('font', true),\n    fontFace: assembly('font-face', true), // fontFace\n    fontFaceFormat: assembly('font-face-format', true), // fontFaceFormat\n    fontFaceName: assembly('font-face-name', true), // fontFaceName\n    fontFaceSrc: assembly('font-face-src', true), // fontFaceSrc\n    fontFaceUri: assembly('font-face-uri', true), // fontFaceUri\n    foreignObject: assembly('foreignObject', true),\n    g: assembly('g', true),\n    glyph: assembly('glyph', true),\n    glyphRef: assembly('glyphRef', true),\n    handler: assembly('handler', true),\n    hatch: assembly('hatch', true),\n    hatchpath: assembly('hatchpath', true),\n    hkern: assembly('hkern', true),\n    image: assembly('image', true),\n    line: assembly('line', true),\n    linearGradient: assembly('linearGradient', true),\n    listener: assembly('listener'),\n    marker: assembly('marker', true),\n    mask: assembly('mask', true),\n    mesh: assembly('mesh', true),\n    meshgradient: assembly('meshgradient', true),\n    meshpatch: assembly('meshpatch', true),\n    meshrow: assembly('meshrow', true),\n    metadata: assembly('metadata', true),\n    missingGlyph: assembly('missing-glyph', true), // missing-glyph\n    mpath: assembly('mpath', true),\n    path: assembly('path', true),\n    pattern: assembly('pattern', true),\n    polygon: assembly('polygon', true),\n    polyline: assembly('polyline', true),\n    prefetch: assembly('prefetch', true),\n    radialGradient: assembly('radialGradient', true),\n    rect: assembly('rect', true),\n    set: assembly('set', true),\n    solidColor: assembly('solidColor', true),\n    solidcolor: assembly('solidcolor', true),\n    Stop: assembly('stop', true), // First capital\n    Switch: assembly('switch', true), // First capital\n    symbol: assembly('symbol', true),\n    tbreak: assembly('tbreak', true),\n    text: assembly('text', true),\n    textArea: assembly('textArea', true),\n    textPath: assembly('textPath', true),\n    tref: assembly('tref', true),\n    tspan: assembly('tspan', true),\n    unknown: assembly('unknown', true),\n    use: assembly('use', true),\n    view: assembly('view', true),\n    vkern: assembly('vkern', true)\n})\n\nexport default tags;"],"names":["isPlaneObject","toString","call","value","isVNode","hasOwnProperty","removeChildren","parentNode","firstChild","removeChild","filter","arr","callback","store","arrLength","length","i","push","vNode","t","at","ch","isSVG","val","getChildNodesAsArray","childNodes","whitespaceRules","ignoreTrim","childNodesArr","childNodesLength","nodeType","nodeValue","replace","abstract","getDefinedAttributes","element","attributes","definedAttributes","attributesLength","undefined","attribute","attributeName","name","style","isStyle","cssText","cssList","split","cssListLength","j","part","trim","interfaceSelector","document","querySelector","SVGElement","log","tagName","args","tagNameStr","argsLength","item","isItemObject","isItemVnode","Array","isArray","Node","el","childNode","isComment","type","slice","cache","createDocumentFragment","SVG_NAMESPACE","createAndAppendNode","frag","node","svg","textNode","createTextNode","appendChild","commentNode","createComment","notAnElement","createElementNS","createElement","attributeKeys","Object","keys","attributeKey","indexOf","dataKey","dataset","cleanKey","attributeValue","addEventListener","assign","className","class","setAttribute","forEach","updateDOM","renderFragment","fragmentClone","importNode","parent","rootElement","parentElement","insertBefore","initalRootElement","isPartial","fragment","vDOM","dummyVDOM","dummy","firstElementChild","innerNodes","from","innerNodesLength","outerNodeList","ibIa1","queriedParent","newDOMNode","ibIa2","offset","children","index","r1","selector","CMDHasMany","querySelectorAll","childrenLength","clones","cloneNode","innerHTML","replaceWith","replaceChild","r2","refNode","replaceNode","query","child","childRelative","rm","removeType","backgroundColor","remove","matchingSelectors","matchingSelectorsLength","previousSibling","nextSibling","updateCachedFragmentByCommand","CMD","CMDList","CMDListLength","lastCommand","thirdCommand","secondCommand","action","childLengthAsIndex","hasOffset","initialOffset","parseInt","hasIndex","initalIndex","hasQuery","CMDcode","join","ibIa","r","updateCachedFragment","newVNode","parts","hasCommand","command","cachedNode","render","partialRenderInner","partialNodes","partialNodesKeys","partialNodesLength","partialNodeKey","renderPartial","all","rootSelector","container","Element","initalVNode","Error","or","vNodes","conditions","exclude","filteredVNodes","filteredIndexes","toggle","classes","e","classesLength","ids","tags","test","indexes","vNodesLength","includes","id","c","toUpperCase","x","indexList","Set","loop","data","groupVnodes","hasNumber","loopedVnodes","singleVnode","assembly"],"mappings":"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"}