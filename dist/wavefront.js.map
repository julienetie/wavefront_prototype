{"version":3,"file":"wavefront.js","sources":["../src/helpers.js","../src/assembly.js","../src/logical-methods.js","../src/tags.js"],"sourcesContent":["export const isPlaneObject = value => ({}).toString.call(value) === '[object Object]';\nexport const isString = value => typeof value === 'string';\nexport const isPrimitive = value => isString(value) || typeof value === 'number';\nexport const isFunction = value => typeof value === 'function';\nexport const isElement = value => value instanceof Element;\nexport const isVNode = value => value.hasOwnProperty('t') && value.hasOwnProperty('id');\nexport const removeChildren = parentNode => {\n    while (parentNode.firstChild) {\n        parentNode.removeChild(parentNode.firstChild);\n    }\n}\n/** \n * Filter by loop \n * @param {Array} arr \n * @param {Function} callback \n **/\nexport const filter = (arr, callback) => {\n    const store = [];\n    const arrLength = arr.length;\n    for (let i = 0; i < arrLength; i++) {\n        if (callback(arr[i])) {\n            store.push(arr[i]);\n        }\n    }\n    return store;\n}\n\n/** \n * Inserts a Node before a reference node.\n */\nexport const insertBefore = (parent, newNode, refNode) => parent.insertBefore(newNode, refNode);\n\n/** \n * Inserts a Node after a reference node.\n */\nexport const insertAfter = (parent, newElement, refNode) => {\n    if (parent.lastChild === refNode) {\n        parent.appendChild(newElement);\n    } else {\n        parent.insertBefore(newElement, refNode.nextSibling);\n    }\n};","import {\n    isPlaneObject,\n    isString,\n    isPrimitive,\n    isFunction,\n    isElement,\n    isVNode,\n    removeChildren,\n    filter,\n    insertBefore,\n    insertAfter\n} from './helpers';\n\n\nlet vDOM;\nlet rootElement;\nconst fragment = document.createDocumentFragment();\n\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\n/** \n * @param {string} t - Text \n * @param {Number} id - Identity (Not an attribute)\n * @param {Number} ix - Index \n * @param {Object|string} at - Attributes | Primative\n * @param {Array} ch - Children \n */\nconst node = (t, id, at, ch, isSVG) => {\n    switch (t) {\n        case 'primitive':\n            return { t: 'TEXT', id, val: at };\n        case 'comment':\n            return { t: 'COM', id, val: at };\n        default:\n            return isSVG ? {\n                t,\n                id,\n                at,\n                chx: ch.length,\n                ch,\n                svg: true\n            } : {\n                t,\n                id,\n                at,\n                chx: ch.length,\n                ch\n            };\n    }\n}\n\nlet count = 0;\n\n/** \n Assembly is the mechanics of the tag functions. \n A Wavefront template is a set of nested functions\n which act similar to recursion. \n\n The deepest nested tag of the youngest index is\n the first executed tag function.\n**/\nexport const assembly = (tagName, nodeType) => {\n    const isSVG = nodeType === true;\n\n    return function inner(...args) {\n        const tagNameStr = `${tagName}`;\n        let attributes;\n        let item;\n        let childNodes = [];\n        let i;\n        const argsLength = args.length;\n\n        for (i = 0; i < argsLength; i++) {\n            item = args[i] || {};\n            let isItemObject = isPlaneObject(item);\n            let isItemVnode = item.hasOwnProperty('t');\n\n            // Check if item is a plane object = attribute.\n            if (isItemObject && !isItemVnode) {\n                // let isSelector = false; \n                attributes = item;\n                continue;\n            }\n\n\n            // Check if item is an array = group of child elements.\n            if (Array.isArray(item)) {\n                childNodes = [...childNodes, ...item];\n                continue;\n            }\n\n            // check if item is not an object, array or function = child element.\n            if (isItemObject && isItemVnode || isPrimitive(item)) {\n                childNodes.push(item);\n                continue;\n            }\n\n\n            if (item instanceof Node) {\n                //@TODO Convert item to vNode and push;\n                console.log('item in assembly', item)\n                childNodes.push({ el: item });\n            }\n        }\n\n\n\n        for (i = 0; i < childNodes.length; ++i) {\n            const childNode = childNodes[i];\n            if (isPrimitive(childNode)) {\n                let type;\n                let value;\n                if (childNode[0] === '@') {\n                    type = 'comment';\n                    value = childNode.slice(1)\n                } else {\n                    type = 'primitive';\n                    value = childNode;\n                }\n                count++;\n                childNodes[i] = node(type, count, value, null, isSVG);\n            }\n        }\n\n        count++;\n        // Update child nodes with parentId\n        for (i = 0; i < childNodes.length; ++i) {\n            childNodes[i].pid = count;\n            childNodes[i].ix = i;\n        }\n\n        return node(tagNameStr, count, attributes, childNodes, isSVG);\n    }\n}\n\nvar removeChilds = function(node) {\n    var last;\n    while (last = node.lastChild) node.removeChild(last);\n};\n\n\nconst render = (initalRootElement, vNode, isPartial) => {\n    console.log('X', vNode)\n    // Cache root element \n    if (rootElement === undefined) {\n        rootElement = initalRootElement;\n    }\n    // Creates a new fragment for partials but uses \n    // the fragment cache for the inital render.\n\n    let renderFragment;\n    if (isPartial === true) {\n        renderFragment = document.createDocumentFragment()\n    } else {\n        renderFragment = fragment;\n    }\n\n    const node = isPartial === true ? vNode : vDOM;\n\n    count = 0; // reset counter used for node ids.\n\n\n\n    if (Array.isArray(node)) {\n        /** \n         * Dummy wrapper to treat a non-wrap node as wrapped.\n         */\n        const dummyVDOM = {\n            \"t\": \"div\",\n            \"id\": 2,\n            \"at\": {\n                \"id\": \"dummy\"\n            },\n            \"chx\": 1,\n            \"ch\": node\n        }\n\n        function appendMultipleNodes() {\n            var args = [].slice.call(arguments);\n            for (var x = 1; x < args.length; x++) {\n                args[0].appendChild(args[x])\n            }\n            return args[0]\n        }\n\n        createAndAppendNode(renderFragment, dummyVDOM);\n\n        const dummy = renderFragment.firstElementChild;\n        const innerNodes = dummy.childNodes;\n        const innerNodesLength = innerNodes.length;\n        const outerNodeList = [];\n\n        for (let i = 0; i < innerNodesLength; i++) {\n            outerNodeList.push(innerNodes[i]);\n        }\n        renderFragment.removeChild(dummy);\n\n        appendMultipleNodes(renderFragment, ...outerNodeList)\n\n        requestAnimationFrame(() => {\n            rootElement.appendChild(renderFragment)\n        });\n    } else {\n        // Wrapped element\n        createAndAppendNode(renderFragment, node);\n        requestAnimationFrame(() => {\n            if (!isPartial) {\n                console.log()\n                const fragmentClone = document.importNode(renderFragment, true);\n                rootElement.appendChild(fragmentClone)\n            }\n            return;\n        });\n    }\n\n    return renderFragment;\n}\n\nconst elementCache = {}\n\nconst createAndAppendNode = (frag, node) => {\n    const isSVG = node.svg === true;\n\n    // TEXT_NODE        3\n    if (node.t === 'TEXT') {\n        const textNode = document.createTextNode(node.val);\n        frag.appendChild(textNode);\n        return;\n    }\n    // // COMMENT_NODE     8\n    if (node.t === 'COM') {\n        // console.log('node.val', node.val)\n        const commentNode = document.createComment(node.val);\n        frag.appendChild(commentNode);\n        return;\n    }\n    // console.log('notAnElement', node)\n    const notAnElement = !node.hasOwnProperty('el');\n\n    let element;\n\n    if (notAnElement) {\n        // ELEMENT_NODE     1\n        element = isSVG ? document.createElementNS(SVG_NAMESPACE, node.t) : document.createElement(node.t);\n\n        // Add attributes\n        if (node.at) {\n            const attributes = node.at;\n            const attributeKeys = Object.keys(attributes);\n            const attributesLength = attributeKeys.length;\n\n            for (let i = 0; i < attributesLength; i++) {\n                const attributeKey = attributeKeys[i];\n\n                // Standard dataset syntax.\n                if (attributeKey.indexOf('data-') === 0) {\n                    const dataKey = attributeKey.replace('data-', '');\n                    element.dataset[dataKey] = attributes[attributeKey];\n                    continue;\n                }\n                // Shorthand dataset syntax.\n                if (attributeKey.indexOf('d-') === 0) {\n                    const dataKey = attributeKey.replace('d-', '');\n                    element.dataset[dataKey] = attributes[attributeKey];\n                    continue;\n                }\n                // Props: _\n                if (attributeKey[0] === '_') {\n                    const cleanKey = attributeKey.replace('_', '');\n                    element[cleanKey] = attributes[attributeKey];\n                    continue;\n                }\n\n                const attributeValue = attributes[attributeKey];\n\n                switch (attributeKey) {\n                    case 'e':\n                    case 'event':\n                        element.addEventListener(...attributeValue);\n                        break;\n                    case '$':\n                    case 'style':\n                        Object.assign(element.style, attributeValue);\n                        break;\n                    case 'c':\n                    case 'class':\n                        element.className = attributes.class;\n                        break;\n                    default:\n                        element.setAttribute(attributeKey, attributeValue);\n                        break;\n                }\n            }\n        }\n    } else {\n        element = node.el;\n    }\n    // Add children\n    frag.appendChild(element);\n\n    if (notAnElement && Array.isArray(node.ch)) {\n        node.ch.forEach(childNode => {\n            createAndAppendNode(element, childNode)\n        });\n    }\n}\nconst getReferenceNode = (parent, selector) => {\n\n}\n\n\nconst ibIa1 = (nodeType, queriedParent, newDOMNode, childNode) => {\n    if (nodeType === 't') {\n        insert(queriedParent, newDOMNode, childNode);\n    } else {\n        insert(\n            queriedParent.parentElement,\n            newDOMNode,\n            queriedParent\n        );\n    }\n}\n\nconst ibIa2 = (nodeType, childNodesLength, childNode, offset, queriedParent, newDOMNode) => {\n    if (nodeType === 't') {\n        let textNode;\n        for (let i = 0; i < childNodesLength; i++) {\n            const childNode = childNodes[i];\n            if (childNode.nodeType === 3) {\n                textNode = offset === 0 ? childNode : childNodes[i + offset];\n                break;\n            }\n        }\n        insert(\n            queriedParent,\n            newDOMNode,\n            textNode\n        );\n    } else {\n        insert(\n            queriedParent,\n            newDOMNode,\n            queriedParent.children[index + offset]\n        );\n    }\n}\n\nconst r1 = (type,selector, nodeType, newDOMNode, CMDHasMany, queriedParent) => {\n    if (type === 'all') {\n        const children = queriedParent.querySelectorAll(selector);\n        const childrenLength = children.length;\n        const clones = [];\n\n        if (nodeType !== 't') {\n            for (let i = 0; i < childrenLength; i++) {\n                clones.push(newDOMNode.cloneNode(true));\n            }\n        }\n\n        for (let i = 0; i < childrenLength; i++) {\n            if (nodeType === 't') {\n                children[i].innerHTML = newDOMNode;\n            } else {\n                children[i].replaceWith(clones[i]);\n            }\n        }\n    } else {\n        if (!CMDHasMany) {\n            queriedParent.parentElement.replaceChild(newDOMNode, queriedParent);\n        }\n    }\n}\n\n\nconst r2 = (nodeType, queriedParent, offset, newDOMNode, refNode, childNode) => {\n    switch (nodeType) {\n        case 'e':\n            let refNode = queriedParent.children[index + offset];\n            queriedParent.replaceChild(newDOMNode, refNode);\n            return;\n        case 'n':\n            refNode = queriedParent.childNodes[index + offset];\n            queriedParent.replaceChild(newDOMNode, refNode);\n            return;\n        case 't':\n            let textNode;\n            for (let i = 0; i < childNodesLength; i++) {\n                const childNode = childNodes[i];\n                if (childNode.nodeType === 3) {\n                    textNode = offset === 0 ? childNode : childNodes[i + offset];\n                    break;\n                }\n            }\n            queriedParent.replaceChild(newDOMNode, textNode);\n            return;\n    }\n}\n\nconst replaceNode = (type, queriedParent, query, newDOMNode) => {\n    const child = queriedParent.querySelector(query);\n    const childRelative = type ? child[type] : child;\n    childRelative.replaceWith(newDOMNode);\n}\nconst updateCachedFragmentByCommand = (selector, CMD, queriedParent, newDOMNode, type) => {\n    const CMDList = CMD.split(' ');\n    const CMDListLength = CMDList.length;\n    const CMDHasMany = CMDListLength > 1;\n    const lastCommand = CMDList[CMDListLength - 1];\n    const thirdCommand = CMDList[2];\n    const secondCommand = CMDList[1];\n    const action = CMDList[0];\n    const insert = action === 'ia' ? insertAfter : insertBefore;\n    const childNodes = queriedParent.childNodes;\n    const childNodesLength = childNodes.length;\n    const childLengthAsIndex = childNodesLength - 1;\n\n    // offset. \n    const hasOffset = CMDHasMany ? lastCommand[0] === '+' : false;\n    let initialOffset = hasOffset ? parseInt(lastCommand.slice(1), 10) : 0;\n\n    // index.\n    const hasIndex = !!thirdCommand ? thirdCommand[0] === 'i' : false;\n    let initalIndex = hasIndex ? parseInt(thirdCommand.slice(1), 10) : 0;\n\n    // Limit the index to the child nodes length.\n    const index = initalIndex + offset > childLengthAsIndex ? childLengthAsIndex : initalIndex;\n    const offset = index + initialOffset > childLengthAsIndex ? 0 : initialOffset;\n\n    // nodeType.\n    const nodeType = !!secondCommand ? secondCommand[0] : 'e';\n\n    // query.\n    const hasQuery = !!secondCommand ? secondCommand.indexOf('=') >= 0 : false;\n    const query = hasQuery ? secondCommand.split('=')[1] : null;\n\n    /** \n     * NodeType|Index|Offset|Query\n     *  CMDcode is a binary representation of \n     * the presetnt commands. \n     * Action is present by default.\n     */\n    const CMDcode = parseInt([\n        1,\n        hasIndex + 0,\n        hasOffset + 0,\n        hasQuery + 0\n    ].join(''), 2);\n\n    // console.log('CMDcode', CMDcode)\n    // console.log('action', action)\n    // console.log('nodeType', nodeType)\n    // console.log('index', index)\n    // console.log('offset', offset)\n    // console.log('query', query)\n\n    const ibIa = CMDcode => {\n        switch (CMDcode) {\n            case 0: // ib\n            case 8: // ib e\n                ibIa1(\n                    nodeType,\n                    queriedParent,\n                    newDOMNode,\n                    childNode\n                );\n                return;\n            case 10: // ib e +1\n            case 12: // ib e i0\n            case 14: // ib e i0 +1\n                ibIa2(\n                    nodeType,\n                    childNodesLength,\n                    childNode,\n                    offset,\n                    queriedParent,\n                    newDOMNode\n                );\n                return;\n        }\n    }\n\n    const r = (CMDcode) => {\n        switch (CMDcode) {\n            case 8: // r e\n                r1(\n                    type,\n                    selector,\n                    nodeType,\n                    newDOMNode,\n                    CMDHasMany,\n                    queriedParent\n                );\n                return;\n            case 12:\n            case 14:\n                r2(\n                    nodeType,\n                    queriedParent,\n                    offset,\n                    newDOMNode,\n                    refNode,\n                    childNode\n                );\n                return;\n            case 9:\n                replaceNode(null, queriedParent, query, newDOMNode);\n                return;\n        }\n    }\n\n\n    switch (action) {\n        /**\n         * Insert Before Insert After\n         * Insert before|after without an index will insert the new node\n         * before the parent.\n         */\n        case 'ib':\n        case 'ia':\n            ibIa(CMDcode);\n            return;\n            /** \n                Replace Node\n            **/\n        case 'r':\n            r(CMDcode);\n            break;\n        case 'rb':\n            if (CMDcode === 9) {\n                replaceNode(\n                    'previousSibling',\n                    queriedParent,\n                    query,\n                    newDOMNode\n                );\n            }\n            break;\n        case 'ra':\n            if (CMDcode === 9) {\n                replaceNode(\n                    'nextSibling',\n                    queriedParent,\n                    query,\n                    newDOMNode\n                );\n            }\n            break;\n        case 'rm':\n            //\n            break;\n        case 'rmb':\n            //\n            break;\n        case 'rma':\n            //\n            break;\n        case 'rmA':\n            //\n            break;\n        case 'rmAa':\n            //\n            break;\n        case 'rmAb':\n            //\n            break;\n\n    }\n}\n\n\n\n\n/** \n * Updates the cached fragment by creating the new node \n * and then replacing the childNodes. Updating by command\n * will only modify portions of the cached DOM tree.\n * @param {string} query - The selector and Wavefront query.  \n * @param {Object|string} newVNode - The new node or text\n * @param {Boolean} type - Truthy for .all()\n */\nconst updateCachedFragment = (query, newVNode, type) => {\n    let parts;\n    const hasCommand = (parts = query.split('|')).length === 2;\n    const selector = parts[0];\n    const command = parts[1];\n\n    // The .all method uses the fragment for querySelectorAll and the queried node for querySelector\n    const cachedNode = type === 'all' ? fragment : fragment.querySelector(selector);\n\n    // When using `|r t` with .all() a string value will be expected.  \n    const newDOMNode = typeof newVNode === 'string' ? newVNode : render(undefined, newVNode, true);\n\n    if (hasCommand) {\n        updateCachedFragmentByCommand(selector, command, cachedNode, newDOMNode, type);\n    } else {\n        removeChildren(cachedNode);\n        // Append the new node to the cached fragment.\n        cachedNode.appendChild(newDOMNode);\n    }\n}\n\n\nconst partialRenderInner = (partialNodes, type) => {\n    const partialNodesKeys = Object.keys(partialNodes);\n    const partialNodesLength = partialNodesKeys.length;\n\n    for (let i = 0; i < partialNodesLength; i++) {\n        const partialNodeKey = partialNodesKeys[i];\n        const newVNode = partialNodes[partialNodeKey];\n        updateCachedFragment(partialNodeKey, newVNode, type);\n    }\n\n    // Render the DOM with the updated cachedFragment.\n    removeChildren(rootElement);\n    const fragmentClone = document.importNode(fragment, true);\n    rootElement.appendChild(fragmentClone);\n}\n\nconst partialRender = (partialNodes) => partialRenderInner(partialNodes, 'single');\npartialRender.all = (partialNodes) => partialRenderInner(partialNodes, 'all');\n\nexport const initialize = (rootSelector, vNode) => {\n    // allow a string or element as a querySelector value.\n    const container = isElement(rootSelector) ? rootSelector : document.querySelector(rootSelector);\n\n    // Shallowly validate vNode.\n    const initalVNode = isVNode(vNode) ? vNode : false;\n\n    if (initalVNode === false) {\n        throw new Error(`vNode ${vDOM} is not valid`);\n    }\n\n    // Cache valid vDOM\n    vDOM = initalVNode;\n\n    // Render the inital virual DOM and cache the selectors.\n    render(container, false);\n\n    return partialRender;\n}","import { isPlaneObject, isString, filter} from './helpers';\n\n/** \n * The or method explicitly defines a condition between an array of nodes. \n * @param {Array} vNodes - An array of vNodes \n * @param {Number|Array} switch - A number or series of inidcators (as an array) of what elements to display.\n * @exclude {Boolean} exclude - \n * \n */\nexport const or = (vNodes, conditions, exclude) => {\n    const filteredVNodes = [];\n    const filteredIndexes = [];\n\n    // Return the vNode of a given index.\n    if (typeof conditions === 'number') {\n        return vNodes[conditions];\n    }\n\n\n    // Ensure toggle is an array. \n    const toggle = isString(conditions) ? [conditions] : conditions;\n\n\n    // Non-operational.\n    if (!Array.isArray(toggle) || toggle.length === 0) {\n        return vNodes;\n    }\n\n    // Define conditions required.\n    const classes = filter(toggle, e => e.indexOf('.') > -1);\n    const classesLength = classes.length\n    const ids = filter(toggle, e => e.indexOf('#') === 0);\n    const tags = filter(toggle, e => /^[a-z0-9]+$/i.test(e));\n    const children = filter(toggle, e => e.indexOf('~') === 0);\n    const indexes = filter(toggle, e => typeof e === 'number');\n    const vNodesLength = vNodes.length;\n\n    for (let i = 0; i < vNodesLength; i++) {\n        const vNode = vNodes[i];\n        const attributes = vNode.at;\n\n        // Check class.\n        if (classesLength > 0) {\n              for (let j = 0; j < classesLength; j++) {\n                  if (attributes.class.includes(classes[j].slice(1))) {\n                    filteredIndexes.push(i);\n                }\n              }\n        }\n\n        // Check ids.\n        if (ids.length > 0) {\n            ids.forEach(c => {\n                if (attributes.id === c.slice(1)) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n\n\n        // Check tags.\n        if (tags.length > 0) {\n            tags.forEach(c => {\n                if (vNode.t.toUpperCase() === c.toUpperCase()) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n\n\n        // Check children.\n        if (children.length > 0) {\n            children.forEach(x => {\n                const childrenLength = vNode.ch.filter(c => c.t !== 'TEXT' && c.t !== 'COM').length;\n                if (childrenLength == x.slice(1)) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n    }\n\n\n    // Remove duplicate indexes.\n    const indexList = [...(new Set(filteredIndexes))];\n\n\n    if (exclude === true) {\n        return filter(vNodes, (item, i) => indexList.indexOf(i) === -1);\n    } else {\n        indexList.forEach(index => {\n            filteredVNodes.push(vNodes[index]);\n        });\n        return filteredVNodes;\n    }\n}\n\n\n\n/** \n * or is used when you explicitly want the to inidicate\n * that an item is being looped by n times or via data\n * \n * @param {Object|Array} vNodes \n * @param {*} Data \n */\nexport const loop = (vNodes, data) => {\n    const groupVnodes = Array.isArray(vNodes);\n    const hasNumber = typeof data === 'number';\n\n    if (hasNumber) {\n        const loopedVnodes = [];\n        const singleVnode = isPlaneObject(vNodes);\n\n        // Single vnode looped by an integer.\n        if (singleVnode) {\n            for (let i = 0; i < data; i++) {\n                loopedVnodes.push(vNodes);\n            }\n        }\n\n        // Grouped vnode looped by an integer.\n        if (groupVnodes) {\n            for (let i = 0; i < data; i++) {\n                loopedVnodes.push(...vNodes);\n            }\n        }\n        return loopedVnodes;\n    } else {\n        if (typeof vNodes === 'function') {\n            return vNodes(data)\n\n            if (!Array.isArray(loopedVnodes)) {\n                throw new Error('loop() should return an Array of vnodes');\n            }\n        }\n    }\n}","import { initialize, assembly } from './assembly';\nimport { loop, or } from './logical-methods';\n\n// HTML Elements.\nconst tags = ({\n    a: assembly('a'),\n    abbr: assembly('abbr'),\n    address: assembly('address'),\n    area: assembly('area'),\n    article: assembly('article'),\n    aside: assembly('aside'),\n    assembly,\n    audio: assembly('audio'),\n    childNodes: assembly('childNodes'),\n    base: assembly('base'),\n    bdi: assembly('bdi'),\n    bdo: assembly('bdo'),\n    blockquote: assembly('blockquote'),\n    body: assembly('body'),\n    br: assembly('br'),\n    button: assembly('button'),\n    canvas: assembly('canvas'),\n    caption: assembly('caption'),\n    cite: assembly('cite'),\n    code: assembly('code'),\n    col: assembly('col'),\n    colgroup: assembly('colgroup'),\n    command: assembly('command'),\n    dd: assembly('dd'),\n    del: assembly('del'),\n    dfn: assembly('dfn'),\n    div: assembly('div'),\n    dl: assembly('dl'),\n    doctype: assembly('doctype'),\n    dt: assembly('dt'),\n    em: assembly('em'),\n    embed: assembly('embed'),\n    fieldset: assembly('fieldset'),\n    figcaption: assembly('figcaption'),\n    figure: assembly('figure'),\n    footer: assembly('footer'),\n    form: assembly('form'),\n    h1: assembly('h1'),\n    h2: assembly('h2'),\n    h3: assembly('h3'),\n    h4: assembly('h4'),\n    h5: assembly('h5'),\n    h6: assembly('h6'),\n    header: assembly('header'),\n    hgroup: assembly('hgroup'),\n    hr: assembly('hr'),\n    html: assembly('html'),\n    i: assembly('i'),\n    iframe: assembly('iframe'),\n    img: assembly('img'),\n    initialize,\n    input: assembly('input'),\n    ins: assembly('ins'),\n    kbd: assembly('kbd'),\n    keygen: assembly('keygen'),\n    label: assembly('label'),\n    legend: assembly('legend'),\n    li: assembly('li'),\n    link: assembly('link'),\n    loop,\n    map: assembly('map'),\n    mark: assembly('mark'),\n    menu: assembly('menu'),\n    meta: assembly('meta'),\n    nav: assembly('nav'),\n    noscript: assembly('noscript'),\n    object: assembly('object'),\n    ol: assembly('ol'),\n    optgroup: assembly('optgroup'),\n    option: assembly('option'),\n    or,\n    p: assembly('p'),\n    param: assembly('param'),\n    pre: assembly('pre'),\n    progress: assembly('progress'),\n    q: assembly('q'),\n    rp: assembly('rp'),\n    rt: assembly('rt'),\n    ruby: assembly('ruby'),\n    s: assembly('s'),\n    samp: assembly('samp'),\n    script: assembly('script'),\n    section: assembly('section'),\n    select: assembly('select'),\n    small: assembly('small'),\n    source: assembly('source'),\n    span: assembly('span'),\n    strong: assembly('strong'),\n    style: assembly('style'),\n    sub: assembly('sub'),\n    sup: assembly('sup'),\n    table: assembly('table'),\n    tbody: assembly('tbody'),\n    td: assembly('td'),\n    textarea: assembly('textarea'),\n    tfoot: assembly('tfoot'),\n    th: assembly('th'),\n    thead: assembly('thead'),\n    title: assembly('title'),\n    tr: assembly('tr'),\n    ul: assembly('ul'),\n    Var: assembly('var'), // First capital\n    video: assembly('video'),\n\n    // SVG Elements.\n    svg: assembly('svg', true),\n    altGlyph: assembly('altGlyph', true),\n    altGlyphDef: assembly('altGlyphDef', true),\n    altGlyphItem: assembly('altGlyphItem', true),\n    animate: assembly('animate'),\n    animateColor: assembly('animateColor', true),\n    animateMotion: assembly('animateMotion', true),\n    animateTransform: assembly('animateTransform', true),\n    animation: assembly('animation', true),\n    circle: assembly('circle', true),\n    clipPath: assembly('clipPath', true),\n    colorProfile: assembly('color-profile', true), // color-profile\n    cursor: assembly('cursor', true),\n    defs: assembly('defs', true),\n    desc: assembly('desc', true),\n    discard: assembly('discard', true),\n    ellipse: assembly('ellipse', true),\n    feBlend: assembly('feBlend', true),\n    feColorMatrix: assembly('feComposite', true),\n    feComponentTransfer: assembly('feComponentTransfer', true),\n    feComposite: assembly('feComposite', true),\n    feConvolveMatrix: assembly('feConvolveMatrix', true),\n    feDiffuseLighting: assembly('feDiffuseLighting', true),\n    feDisplacementMap: assembly('feDistantLight', true),\n    feDistantLight: assembly('feDistantLight', true),\n    feDropShadow: assembly('feDropShadow', true),\n    feFlood: assembly('feFlood', true),\n    feFuncA: assembly('feFuncA', true),\n    feFuncB: assembly('feFuncB', true),\n    feFuncG: assembly('feFuncG', true),\n    feFuncR: assembly('feFuncR', true),\n    feGaussianBlur: assembly('feGaussianBlur', true),\n    feImage: assembly('feImage', true),\n    feMerge: assembly('feMerge', true),\n    feMergeNode: assembly('feMergeNode', true),\n    feMorphology: assembly('feMorphology', true),\n    feOffset: assembly('feOffset', true),\n    fePointLight: assembly('fePointLight', true),\n    feSpecularLighting: assembly('feSpecularLighting', true),\n    feSpotLight: assembly('feSpotLight', true),\n    feTile: assembly('feTile', true),\n    feTurbulence: assembly('feTurbulence', true),\n    filter: assembly('filter', true),\n    font: assembly('font', true),\n    fontFace: assembly('font-face', true), // fontFace\n    fontFaceFormat: assembly('font-face-format', true), // fontFaceFormat\n    fontFaceName: assembly('font-face-name', true), // fontFaceName\n    fontFaceSrc: assembly('font-face-src', true), // fontFaceSrc\n    fontFaceUri: assembly('font-face-uri', true), // fontFaceUri\n    foreignObject: assembly('foreignObject', true),\n    g: assembly('g', true),\n    glyph: assembly('glyph', true),\n    glyphRef: assembly('glyphRef', true),\n    handler: assembly('handler', true),\n    hatch: assembly('hatch', true),\n    hatchpath: assembly('hatchpath', true),\n    hkern: assembly('hkern', true),\n    image: assembly('image', true),\n    line: assembly('line', true),\n    linearGradient: assembly('linearGradient', true),\n    listener: assembly('listener'),\n    marker: assembly('marker', true),\n    mask: assembly('mask', true),\n    mesh: assembly('mesh', true),\n    meshgradient: assembly('meshgradient', true),\n    meshpatch: assembly('meshpatch', true),\n    meshrow: assembly('meshrow', true),\n    metadata: assembly('metadata', true),\n    missingGlyph: assembly('missing-glyph', true), // missing-glyph\n    mpath: assembly('mpath', true),\n    path: assembly('path', true),\n    pattern: assembly('pattern', true),\n    polygon: assembly('polygon', true),\n    polyline: assembly('polyline', true),\n    prefetch: assembly('prefetch', true),\n    radialGradient: assembly('radialGradient', true),\n    rect: assembly('rect', true),\n    set: assembly('set', true),\n    solidColor: assembly('solidColor', true),\n    solidcolor: assembly('solidcolor', true),\n    Stop: assembly('stop', true), // First capital\n    Switch: assembly('switch', true), // First capital\n    symbol: assembly('symbol', true),\n    tbreak: assembly('tbreak', true),\n    text: assembly('text', true),\n    textArea: assembly('textArea', true),\n    textPath: assembly('textPath', true),\n    tref: assembly('tref', true),\n    tspan: assembly('tspan', true),\n    unknown: assembly('unknown', true),\n    use: assembly('use', true),\n    view: assembly('view', true),\n    vkern: assembly('vkern', true)\n})\n\nexport default tags;"],"names":["isPlaneObject","toString","call","value","isString","isPrimitive","isElement","Element","isVNode","hasOwnProperty","removeChildren","parentNode","firstChild","removeChild","filter","arr","callback","store","arrLength","length","i","push","insertBefore","parent","newNode","refNode","insertAfter","newElement","lastChild","appendChild","nextSibling","vDOM","rootElement","fragment","document","createDocumentFragment","SVG_NAMESPACE","node","t","id","at","ch","isSVG","val","count","assembly","tagName","nodeType","inner","tagNameStr","attributes","item","childNodes","args","argsLength","isItemObject","isItemVnode","Array","isArray","Node","log","el","childNode","type","slice","pid","ix","render","initalRootElement","vNode","isPartial","undefined","renderFragment","appendMultipleNodes","arguments","x","dummyVDOM","dummy","firstElementChild","innerNodes","innerNodesLength","outerNodeList","fragmentClone","importNode","createAndAppendNode","frag","svg","textNode","createTextNode","commentNode","createComment","notAnElement","element","createElementNS","createElement","attributeKeys","Object","keys","attributesLength","attributeKey","indexOf","dataKey","replace","dataset","cleanKey","attributeValue","addEventListener","assign","style","className","class","setAttribute","forEach","ibIa1","queriedParent","newDOMNode","parentElement","ibIa2","childNodesLength","offset","children","index","r1","selector","CMDHasMany","querySelectorAll","childrenLength","clones","cloneNode","innerHTML","replaceWith","replaceChild","r2","replaceNode","query","child","querySelector","childRelative","updateCachedFragmentByCommand","CMD","CMDList","split","CMDListLength","lastCommand","thirdCommand","secondCommand","action","insert","childLengthAsIndex","hasOffset","initialOffset","parseInt","hasIndex","initalIndex","hasQuery","CMDcode","join","ibIa","r","updateCachedFragment","newVNode","parts","hasCommand","command","cachedNode","partialRenderInner","partialNodes","partialNodesKeys","partialNodesLength","partialNodeKey","partialRender","all","initialize","rootSelector","container","initalVNode","Error","or","vNodes","conditions","exclude","filteredVNodes","filteredIndexes","toggle","classes","e","classesLength","ids","tags","test","indexes","vNodesLength","j","includes","c","toUpperCase","indexList","Set","loop","data","groupVnodes","hasNumber","loopedVnodes","singleVnode"],"mappings":"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"}