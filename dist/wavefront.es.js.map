{"version":3,"file":"wavefront.es.js","sources":["../src/helpers.js","../src/cache.js","../src/assembly.js","../src/logical-methods.js","../src/tags.js"],"sourcesContent":["export const isPlaneObject = value => ({}).toString.call(value) === '[object Object]';\nexport const isString = value => typeof value === 'string';\nexport const isPrimitive = value => isString(value) || typeof value === 'number';\nexport const isFunction = value => typeof value === 'function';\nexport const isElement = value => value instanceof Element;\nexport const isVNode = value => value.hasOwnProperty('t');\nexport const removeChildren = parentNode => {\n    while (parentNode.firstChild) {\n        parentNode.removeChild(parentNode.firstChild);\n    }\n}\n/** \n * Filter by loop \n * @param {Array} arr \n * @param {Function} callback \n **/\nexport const filter = (arr, callback) => {\n    const store = [];\n    const arrLength = arr.length;\n    for (let i = 0; i < arrLength; i++) {\n        if (callback(arr[i])) {\n            store.push(arr[i]);\n        }\n    }\n    return store;\n}\n\n/** \n * Inserts a Node before a reference node.\n */\nexport const insertBefore = (parent, newNode, refNode) => parent.insertBefore(newNode, refNode);\n\n/** \n * Inserts a Node after a reference node.\n */\nexport const insertAfter = (parent, newElement, refNode) => {\n    if (parent.lastChild === refNode) {\n        parent.appendChild(newElement);\n    } else {\n        parent.insertBefore(newElement, refNode.nextSibling);\n    }\n};","/** \n * Shared cache accessible between modules. \n */\nconst cache = {\n\tvDOM: null,\n\trootElement: null\n}\n\nexport default cache;\n","import {\n    isPlaneObject,\n    isString,\n    isPrimitive,\n    isFunction,\n    isElement,\n    isVNode,\n    removeChildren,\n    filter,\n    insertBefore,\n    insertAfter\n} from './helpers';\n\nimport cache from './cache';\n\n\nconst fragment = document.createDocumentFragment();\n\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\n/** \n * @param {string} t - Text \n * @param {Number} id - Identity (Not an attribute)\n * @param {Number} ix - Index \n * @param {Object|string} at - Attributes | Primative\n * @param {Array} ch - Children \n */\nconst node = (t, at, ch, isSVG) => {\n    switch (t) {\n        case 'primitive':\n            return { t: 'TEXT', val: at };\n        case 'comment':\n            return { t: 'COM', val: at };\n        default:\n            return isSVG ? {\n                t,\n                at,\n                chx: ch.length,\n                ch,\n                svg: true\n            } : {\n                t,\n                at,\n                chx: ch.length,\n                ch\n            };\n    }\n}\n\n/** \n Assembly is the mechanics of the tag functions. \n A Wavefront template is a set of nested functions\n which act similar to recursion. \n\n The deepest nested tag of the youngest index is\n the first executed tag function.\n**/\nexport const assembly = (tagName, nodeType) => {\n    const isSVG = nodeType === true;\n\n    return function inner(...args) {\n        const tagNameStr = `${tagName}`;\n        let attributes;\n        let item;\n        let childNodes = [];\n        let i;\n        const argsLength = args.length;\n\n        for (i = 0; i < argsLength; i++) {\n            item = args[i] || {};\n            let isItemObject = isPlaneObject(item);\n            let isItemVnode = item.hasOwnProperty('t');\n\n            // Check if item is a plane object = attribute.\n            if (isItemObject && !isItemVnode) {\n                // let isSelector = false; \n                attributes = item;\n                continue;\n            }\n\n\n            // Check if item is an array = group of child elements.\n            if (Array.isArray(item)) {\n                childNodes = [...childNodes, ...item];\n                continue;\n            }\n\n            // check if item is not an object, array or function = child element.\n            if (isItemObject && isItemVnode || isPrimitive(item)) {\n                childNodes.push(item);\n                continue;\n            }\n\n\n            if (item instanceof Node) {\n                //@TODO Convert item to vNode and push;\n                childNodes.push({ el: item });\n            }\n        }\n\n\n\n        for (i = 0; i < childNodes.length; ++i) {\n            const childNode = childNodes[i];\n            if (isPrimitive(childNode)) {\n                let type;\n                let value;\n                if (childNode[0] === '@') {\n                    type = 'comment';\n                    value = childNode.slice(1)\n                } else {\n                    type = 'primitive';\n                    value = childNode;\n                }\n                childNodes[i] = node(type, value, null, isSVG);\n            }\n        }\n\n        // Update child nodes with parentId\n        for (i = 0; i < childNodes.length; ++i) {\n            childNodes[i].ix = i;\n        }\n\n        return node(tagNameStr, attributes, childNodes, isSVG);\n    }\n}\n\nvar removeChilds = function(node) {\n    var last;\n    while (last = node.lastChild) node.removeChild(last);\n};\n\n\nconst render = (initalRootElement, vNode, isPartial) => {\n    // Cache root element \n    if (cache.rootElement === null) {\n        cache.rootElement = initalRootElement;\n    }\n\n    // Creates a new fragment for partials but uses \n    // the fragment cache for the inital render.\n    const renderFragment = isPartial === true ? document.createDocumentFragment() : fragment;\n\n    const node = isPartial === true ? vNode : cache.vDOM;\n\n    /** \n     * Dummy wrapper to treat a non-wrap node as wrapped.\n     */\n    const dummyVDOM = {\n        \"t\": \"div\",\n        \"id\": 2,\n        \"at\": {\n            \"id\": \"dummy\"\n        },\n        \"chx\": 1,\n        \"ch\": node\n    }\n\n\n    if (Array.isArray(node)) {\n\n        createAndAppendNode(renderFragment, dummyVDOM);\n        const dummy = renderFragment.firstElementChild;\n        const innerNodes = Array.from(dummy.childNodes);\n        const innerNodesLength = innerNodes.length;\n        const outerNodeList = [];\n\n        for (let i = 0; i < innerNodesLength; i++) {\n            renderFragment.appendChild(innerNodes[i])\n        }\n\n        renderFragment.removeChild(dummy);\n\n        requestAnimationFrame(() => {\n            const fragmentClone = document.importNode(renderFragment, true);\n            cache.rootElement.appendChild(fragmentClone)\n        });\n    } else {\n\n        // Wrapped element\n        createAndAppendNode(renderFragment, node);\n        requestAnimationFrame(() => {\n            if (!isPartial) {\n                const fragmentClone = document.importNode(renderFragment, true);\n                cache.rootElement.appendChild(fragmentClone)\n            }\n            return;\n        });\n    }\n\n    return renderFragment;\n}\n\nconst elementCache = {}\n\nconst createAndAppendNode = (frag, node) => {\n    const isSVG = node.svg === true;\n\n    // TEXT_NODE        3\n    if (node.t === 'TEXT') {\n        const textNode = document.createTextNode(node.val);\n        frag.appendChild(textNode);\n        return;\n    }\n    // // COMMENT_NODE     8\n    if (node.t === 'COM') {\n        const commentNode = document.createComment(node.val);\n        frag.appendChild(commentNode);\n        return;\n    }\n    const notAnElement = !node.hasOwnProperty('el');\n\n    let element;\n\n    if (notAnElement) {\n        // ELEMENT_NODE     1\n        element = isSVG ? document.createElementNS(SVG_NAMESPACE, node.t) : document.createElement(node.t);\n\n        // Add attributes\n        if (node.at) {\n            const attributes = node.at;\n            const attributeKeys = Object.keys(attributes);\n            const attributesLength = attributeKeys.length;\n\n            for (let i = 0; i < attributesLength; i++) {\n                const attributeKey = attributeKeys[i];\n\n                // Standard dataset syntax.\n                if (attributeKey.indexOf('data-') === 0) {\n                    const dataKey = attributeKey.replace('data-', '');\n                    element.dataset[dataKey] = attributes[attributeKey];\n                    continue;\n                }\n                // Shorthand dataset syntax.\n                if (attributeKey.indexOf('d-') === 0) {\n                    const dataKey = attributeKey.replace('d-', '');\n                    element.dataset[dataKey] = attributes[attributeKey];\n                    continue;\n                }\n                // Props: _\n                if (attributeKey[0] === '_') {\n                    const cleanKey = attributeKey.replace('_', '');\n                    element[cleanKey] = attributes[attributeKey];\n                    continue;\n                }\n\n                const attributeValue = attributes[attributeKey];\n\n                switch (attributeKey) {\n                    case 'e':\n                    case 'event':\n                        element.addEventListener(...attributeValue);\n                        break;\n                    case '$':\n                    case 'style':\n                        Object.assign(element.style, attributeValue);\n                        break;\n                    case 'c':\n                    case 'class':\n                        element.className = attributes.class;\n                        break;\n                    default:\n                        element.setAttribute(attributeKey, attributeValue);\n                        break;\n                }\n            }\n        }\n    } else {\n        element = node.el;\n    }\n    // Add children\n    frag.appendChild(element);\n\n    if (notAnElement && Array.isArray(node.ch)) {\n        node.ch.forEach(childNode => {\n            createAndAppendNode(element, childNode)\n        });\n    }\n}\nconst getReferenceNode = (parent, selector) => {\n\n}\n\n\nconst ibIa1 = (nodeType, queriedParent, newDOMNode, childNode) => {\n    if (nodeType === 't') {\n        insert(queriedParent, newDOMNode, childNode);\n    } else {\n        insert(\n            queriedParent.parentElement,\n            newDOMNode,\n            queriedParent\n        );\n    }\n}\n\nconst ibIa2 = (nodeType, childNodesLength, childNode, offset, queriedParent, newDOMNode) => {\n    if (nodeType === 't') {\n        let textNode;\n        for (let i = 0; i < childNodesLength; i++) {\n            const childNode = childNodes[i];\n            if (childNode.nodeType === 3) {\n                textNode = offset === 0 ? childNode : childNodes[i + offset];\n                break;\n            }\n        }\n        insert(\n            queriedParent,\n            newDOMNode,\n            textNode\n        );\n    } else {\n        insert(\n            queriedParent,\n            newDOMNode,\n            queriedParent.children[index + offset]\n        );\n    }\n}\n\nconst r1 = (type, selector, nodeType, newDOMNode, CMDHasMany, queriedParent) => {\n    if (type === 'all') {\n        const children = queriedParent.querySelectorAll(selector);\n        const childrenLength = children.length;\n        const clones = [];\n\n        if (nodeType !== 't') {\n            for (let i = 0; i < childrenLength; i++) {\n                clones.push(newDOMNode.cloneNode(true));\n            }\n        }\n\n        for (let i = 0; i < childrenLength; i++) {\n            if (nodeType === 't') {\n                children[i].innerHTML = newDOMNode;\n            } else {\n                children[i].replaceWith(clones[i]);\n            }\n        }\n    } else {\n        if (!CMDHasMany) {\n            queriedParent.parentElement.replaceChild(newDOMNode, queriedParent);\n        }\n    }\n}\n\n\nconst r2 = (nodeType, queriedParent, offset, newDOMNode, refNode, childNode) => {\n    switch (nodeType) {\n        case 'e':\n            let refNode = queriedParent.children[index + offset];\n            queriedParent.replaceChild(newDOMNode, refNode);\n            return;\n        case 'n':\n            refNode = queriedParent.childNodes[index + offset];\n            queriedParent.replaceChild(newDOMNode, refNode);\n            return;\n        case 't':\n            let textNode;\n            for (let i = 0; i < childNodesLength; i++) {\n                const childNode = childNodes[i];\n                if (childNode.nodeType === 3) {\n                    textNode = offset === 0 ? childNode : childNodes[i + offset];\n                    break;\n                }\n            }\n            queriedParent.replaceChild(newDOMNode, textNode);\n            return;\n    }\n}\n\n\n\nconst replaceNode = (type, queriedParent, query, newDOMNode) => {\n    const child = queriedParent.querySelector(query);\n    const childRelative = type ? child[type] : child;\n    childRelative.replaceWith(newDOMNode);\n}\n\n\nconst rm = (nodeType, type, queriedParent, selector, removeType, offset) => {\n\n    if (nodeType === 't') {\n\n        if (type === 'single') {\n            // const children = queriedParent.querySelectorAll(selector);\n            queriedParent.style.backgroundColor = 'red'\n            const childNodes = queriedParent.childNodes\n            const childNodesLength = childNodes.length;\n\n            let textNode;\n            for (let i = 0; i < childNodesLength; i++) {\n                const childNode = childNodes[i];\n                if (childNode.nodeType === 3) {\n                    // textNode = offset === 0 ? childNode : childNodes[i + offset];\n                    console.log('childNodes', childNode)\n                    childNode.remove(childNodes[i + offset]);\n                    return;\n                }\n            }\n            return;\n        }\n\n        if (type === 'all') {\n            const matchingSelectors = queriedParent.querySelectorAll(selector);\n            const matchingSelectorsLength = matchingSelectors.length;\n            for (let j = 0; j < matchingSelectorsLength; j++) {\n                const childNodes = matchingSelectors[j].childNodes\n                matchingSelectors[j].style.backgroundColor = 'red'\n                const childNodesLength = childNodes.length;\n\n                let textNode;\n                for (let i = 0; i < childNodesLength; i++) {\n                    const childNode = childNodes[i];\n                    if (childNode.nodeType === 3) {\n                        matchingSelectors[j].remove(childNodes[i + offset]);\n                    }\n                }\n            }\n            return;\n        }\n    }\n\n\n    if (type === 'all') {\n        const children = queriedParent.querySelectorAll(selector);\n        const childrenLength = children.length;\n\n        switch (removeType) {\n            case 'selected':\n                for (let i = 0; i < childrenLength; i++) {\n                    const child = children[i];\n                    child.style.backgroundColor = 'pink'\n                    child.remove(child);\n                }\n                return;\n            case 'before':\n                console.log('BEFORE')\n                for (let i = 0; i < childrenLength; i++) {\n                    const child = children[i];\n                    if (i > 0) {\n                        child.remove(child.previousSibling);\n                    }\n                }\n                return;\n            case 'after':\n                for (let i = 0; i < childrenLength; i++) {\n                    const child = children[i];\n                    if (i < childrenLength - 1) {\n                        const nextSibling = child.nextSibling;\n                        nextSibling.remove(nextSibling);\n                    }\n                }\n                return;\n        }\n\n    } else {\n        switch (removeType) {\n            case 'selected':\n                queriedParent.parentElement.removeChild(queriedParent);\n                return;\n            case 'before':\n                const previousSibling = queriedParent.previousSibling;\n                if (!!previousSibling) {\n                    queriedParent.parentElement.removeChild(previousSibling);\n                }\n                return;\n            case 'after':\n                const nextSibling = queriedParent.nextSibling;\n                if (!!nextSibling) {\n                    queriedParent.parentElement.removeChild(nextSibling);\n                }\n                return;\n        }\n    }\n}\n\n\nconst updateCachedFragmentByCommand = (selector, CMD, queriedParent, newDOMNode, type) => {\n    const CMDList = CMD.split(' ');\n    const CMDListLength = CMDList.length;\n    const CMDHasMany = CMDListLength > 1;\n    const lastCommand = CMDList[CMDListLength - 1];\n    const thirdCommand = CMDList[2];\n    const secondCommand = CMDList[1];\n    const action = CMDList[0];\n    const insert = action === 'ia' ? insertAfter : insertBefore;\n    const childNodes = queriedParent.childNodes;\n    const childNodesLength = childNodes.length;\n    const childLengthAsIndex = childNodesLength - 1;\n\n    // offset. \n    const hasOffset = CMDHasMany ? lastCommand[0] === '+' : false;\n    let initialOffset = hasOffset ? parseInt(lastCommand.slice(1), 10) : 0;\n\n    // index.\n    const hasIndex = !!thirdCommand ? thirdCommand[0] === 'i' : false;\n    let initalIndex = hasIndex ? parseInt(thirdCommand.slice(1), 10) : 0;\n\n    // Limit the index to the child nodes length.\n    const index = initalIndex + offset > childLengthAsIndex ? childLengthAsIndex : initalIndex;\n    const offset = index + initialOffset > childLengthAsIndex ? 0 : initialOffset;\n\n    // nodeType.\n    const nodeType = !!secondCommand ? secondCommand[0] : 'e';\n\n    // query.\n    const hasQuery = !!secondCommand ? secondCommand.indexOf('=') >= 0 : false;\n    const query = hasQuery ? secondCommand.split('=')[1] : null;\n\n    /** \n     * NodeType|Index|Offset|Query\n     *  CMDcode is a binary representation of \n     * the presetnt commands. \n     * Action is present by default.\n     */\n    const CMDcode = parseInt([\n        1,\n        hasIndex + 0,\n        hasOffset + 0,\n        hasQuery + 0\n    ].join(''), 2);\n\n    const ibIa = CMDcode => {\n        switch (CMDcode) {\n            case 0: // ib\n            case 8: // ib e\n                ibIa1(\n                    nodeType,\n                    queriedParent,\n                    newDOMNode,\n                    childNode\n                );\n                return;\n            case 10: // ib e +1\n            case 12: // ib e i0\n            case 14: // ib e i0 +1\n                ibIa2(\n                    nodeType,\n                    childNodesLength,\n                    childNode,\n                    offset,\n                    queriedParent,\n                    newDOMNode\n                );\n                return;\n        }\n    }\n\n    const r = (CMDcode) => {\n        switch (CMDcode) {\n            case 8: // r e\n                r1(\n                    type,\n                    selector,\n                    nodeType,\n                    newDOMNode,\n                    CMDHasMany,\n                    queriedParent\n                );\n                return;\n            case 12:\n            case 14:\n                r2(\n                    nodeType,\n                    queriedParent,\n                    offset,\n                    newDOMNode,\n                    refNode,\n                    childNode\n                );\n                return;\n            case 9:\n                replaceNode(null, queriedParent, query, newDOMNode);\n                return;\n        }\n    }\n\n\n    switch (action) {\n        /**\n         * Insert Before Insert After\n         * Insert before|after without an index will insert the new node\n         * before the parent.\n         */\n        case 'ib':\n        case 'ia':\n            ibIa(CMDcode);\n            return;\n            /** \n                Replace Node\n            **/\n        case 'r':\n            r(CMDcode);\n            break;\n        case 'rb':\n            if (CMDcode === 9) {\n                replaceNode(\n                    'previousSibling',\n                    queriedParent,\n                    query,\n                    newDOMNode\n                );\n            }\n            break;\n        case 'ra':\n            if (CMDcode === 9) {\n                replaceNode(\n                    'nextSibling',\n                    queriedParent,\n                    query,\n                    newDOMNode\n                );\n            }\n            return;\n        case 'rm':\n\n\n            rm(nodeType, type, queriedParent, selector, 'selected', offset);\n            return;\n        case 'rmb':\n            rm(nodeType, type, queriedParent, selector, 'before', offset);\n            return;\n        case 'rma':\n            rm(nodeType, type, queriedParent, selector, 'after', offset);\n            return;\n    }\n}\n\n\n\n\n/** \n * Updates the cached fragment by creating the new node \n * and then replacing the childNodes. Updating by command\n * will only modify portions of the cached DOM tree.\n * @param {string} query - The selector and Wavefront query.  \n * @param {Object|string} newVNode - The new node or text\n * @param {Boolean} type - Truthy for .all()\n */\nconst updateCachedFragment = (query, newVNode, type) => {\n    let parts;\n    const hasCommand = (parts = query.split('|')).length === 2;\n    const selector = parts[0];\n    const command = parts[1];\n\n    // The .all method uses the fragment for querySelectorAll and the queried node for querySelector\n    const cachedNode = type === 'all' ? fragment : fragment.querySelector(selector);\n    // When using `|r t` with .all() a string value will be expected.  \n    const newDOMNode = typeof newVNode === 'string' ? newVNode : render(undefined, newVNode, true);\n\n    if (hasCommand) {\n        updateCachedFragmentByCommand(selector, command, cachedNode, newDOMNode, type);\n    } else {\n        removeChildren(cachedNode);\n        // Append the new node to the cached fragment.\n        cachedNode.appendChild(newDOMNode);\n    }\n}\n\n\nconst partialRenderInner = (partialNodes, type) => {\n    const partialNodesKeys = Object.keys(partialNodes);\n    const partialNodesLength = partialNodesKeys.length;\n\n    for (let i = 0; i < partialNodesLength; i++) {\n        const partialNodeKey = partialNodesKeys[i];\n        const newVNode = partialNodes[partialNodeKey];\n        updateCachedFragment(partialNodeKey, newVNode, type);\n    }\n    // Render the DOM with the updated cachedFragment.\n    removeChildren(cache.rootElement);\n    const fragmentClone = document.importNode(fragment, true);\n\n    cache.rootElement.appendChild(fragmentClone);\n\n\n}\n\nconst partialRender = (partialNodes) => partialRenderInner(partialNodes, 'single');\npartialRender.all = (partialNodes) => partialRenderInner(partialNodes, 'all');\n\nexport const initialize = (rootSelector, vNode) => {\n    // allow a string or element as a querySelector value.\n    const container = isElement(rootSelector) ? rootSelector : document.querySelector(rootSelector);\n\n    // Shallowly validate vNode.\n    const initalVNode = isVNode(vNode) || Array.isArray(vNode) ? vNode : false;\n\n    if (initalVNode === false) {\n        throw new Error(`vNode ${cache.vDOM} is not valid`);\n    }\n\n    // Cache valid vDOM\n    cache.vDOM = initalVNode;\n    // Render the inital virual DOM and cache the selectors.\n    render(container, false);\n\n    return partialRender;\n}","import { isPlaneObject, isString, filter} from './helpers';\n\n/** \n * The or method explicitly defines a condition between an array of nodes. \n * @param {Array} vNodes - An array of vNodes \n * @param {Number|Array} switch - A number or series of inidcators (as an array) of what elements to display.\n * @exclude {Boolean} exclude - \n * \n */\nexport const or = (vNodes, conditions, exclude) => {\n    const filteredVNodes = [];\n    const filteredIndexes = [];\n\n    // Return the vNode of a given index.\n    if (typeof conditions === 'number') {\n        return vNodes[conditions];\n    }\n\n\n    // Ensure toggle is an array. \n    const toggle = isString(conditions) ? [conditions] : conditions;\n\n\n    // Non-operational.\n    if (!Array.isArray(toggle) || toggle.length === 0) {\n        return vNodes;\n    }\n\n    // Define conditions required.\n    const classes = filter(toggle, e => e.indexOf('.') > -1);\n    const classesLength = classes.length\n    const ids = filter(toggle, e => e.indexOf('#') === 0);\n    const tags = filter(toggle, e => /^[a-z0-9]+$/i.test(e));\n    const children = filter(toggle, e => e.indexOf('~') === 0);\n    const indexes = filter(toggle, e => typeof e === 'number');\n    const vNodesLength = vNodes.length;\n\n    for (let i = 0; i < vNodesLength; i++) {\n        const vNode = vNodes[i];\n        const attributes = vNode.at;\n\n        // Check class.\n        if (classesLength > 0) {\n              for (let j = 0; j < classesLength; j++) {\n                  if (attributes.class.includes(classes[j].slice(1))) {\n                    filteredIndexes.push(i);\n                }\n              }\n        }\n\n        // Check ids.\n        if (ids.length > 0) {\n            ids.forEach(c => {\n                if (attributes.id === c.slice(1)) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n\n\n        // Check tags.\n        if (tags.length > 0) {\n            tags.forEach(c => {\n                if (vNode.t.toUpperCase() === c.toUpperCase()) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n\n\n        // Check children.\n        if (children.length > 0) {\n            children.forEach(x => {\n                const childrenLength = vNode.ch.filter(c => c.t !== 'TEXT' && c.t !== 'COM').length;\n                if (childrenLength == x.slice(1)) {\n                    filteredIndexes.push(i);\n                }\n            });\n        }\n    }\n\n\n    // Remove duplicate indexes.\n    const indexList = [...(new Set(filteredIndexes))];\n\n\n    if (exclude === true) {\n        return filter(vNodes, (item, i) => indexList.indexOf(i) === -1);\n    } else {\n        indexList.forEach(index => {\n            filteredVNodes.push(vNodes[index]);\n        });\n        return filteredVNodes;\n    }\n}\n\n\n\n/** \n * or is used when you explicitly want the to inidicate\n * that an item is being looped by n times or via data\n * \n * @param {Object|Array} vNodes \n * @param {*} Data \n */\nexport const loop = (vNodes, data) => {\n    const groupVnodes = Array.isArray(vNodes);\n    const hasNumber = typeof data === 'number';\n\n    if (hasNumber) {\n        const loopedVnodes = [];\n        const singleVnode = isPlaneObject(vNodes);\n\n        // Single vnode looped by an integer.\n        if (singleVnode) {\n            for (let i = 0; i < data; i++) {\n                loopedVnodes.push(vNodes);\n            }\n        }\n\n        // Grouped vnode looped by an integer.\n        if (groupVnodes) {\n            for (let i = 0; i < data; i++) {\n                loopedVnodes.push(...vNodes);\n            }\n        }\n        return loopedVnodes;\n    } else {\n        if (typeof vNodes === 'function') {\n            return vNodes(data)\n\n            if (!Array.isArray(loopedVnodes)) {\n                throw new Error('loop() should return an Array of vnodes');\n            }\n        }\n    }\n}","import { initialize, assembly } from './assembly';\nimport { loop, or } from './logical-methods';\n\n// HTML Elements.\nconst tags = ({\n    a: assembly('a'),\n    abbr: assembly('abbr'),\n    address: assembly('address'),\n    area: assembly('area'),\n    article: assembly('article'),\n    aside: assembly('aside'),\n    assembly,\n    audio: assembly('audio'),\n    childNodes: assembly('childNodes'),\n    base: assembly('base'),\n    bdi: assembly('bdi'),\n    bdo: assembly('bdo'),\n    blockquote: assembly('blockquote'),\n    body: assembly('body'),\n    br: assembly('br'),\n    button: assembly('button'),\n    canvas: assembly('canvas'),\n    caption: assembly('caption'),\n    cite: assembly('cite'),\n    code: assembly('code'),\n    col: assembly('col'),\n    colgroup: assembly('colgroup'),\n    command: assembly('command'),\n    dd: assembly('dd'),\n    del: assembly('del'),\n    dfn: assembly('dfn'),\n    div: assembly('div'),\n    dl: assembly('dl'),\n    doctype: assembly('doctype'),\n    dt: assembly('dt'),\n    em: assembly('em'),\n    embed: assembly('embed'),\n    fieldset: assembly('fieldset'),\n    figcaption: assembly('figcaption'),\n    figure: assembly('figure'),\n    footer: assembly('footer'),\n    form: assembly('form'),\n    h1: assembly('h1'),\n    h2: assembly('h2'),\n    h3: assembly('h3'),\n    h4: assembly('h4'),\n    h5: assembly('h5'),\n    h6: assembly('h6'),\n    header: assembly('header'),\n    hgroup: assembly('hgroup'),\n    hr: assembly('hr'),\n    html: assembly('html'),\n    i: assembly('i'),\n    iframe: assembly('iframe'),\n    img: assembly('img'),\n    initialize,\n    input: assembly('input'),\n    ins: assembly('ins'),\n    kbd: assembly('kbd'),\n    keygen: assembly('keygen'),\n    label: assembly('label'),\n    legend: assembly('legend'),\n    li: assembly('li'),\n    link: assembly('link'),\n    loop,\n    map: assembly('map'),\n    mark: assembly('mark'),\n    menu: assembly('menu'),\n    meta: assembly('meta'),\n    nav: assembly('nav'),\n    noscript: assembly('noscript'),\n    object: assembly('object'),\n    ol: assembly('ol'),\n    optgroup: assembly('optgroup'),\n    option: assembly('option'),\n    or,\n    p: assembly('p'),\n    param: assembly('param'),\n    pre: assembly('pre'),\n    progress: assembly('progress'),\n    q: assembly('q'),\n    rp: assembly('rp'),\n    rt: assembly('rt'),\n    ruby: assembly('ruby'),\n    s: assembly('s'),\n    samp: assembly('samp'),\n    script: assembly('script'),\n    section: assembly('section'),\n    select: assembly('select'),\n    small: assembly('small'),\n    source: assembly('source'),\n    span: assembly('span'),\n    strong: assembly('strong'),\n    style: assembly('style'),\n    sub: assembly('sub'),\n    sup: assembly('sup'),\n    table: assembly('table'),\n    tbody: assembly('tbody'),\n    td: assembly('td'),\n    textarea: assembly('textarea'),\n    tfoot: assembly('tfoot'),\n    th: assembly('th'),\n    thead: assembly('thead'),\n    title: assembly('title'),\n    tr: assembly('tr'),\n    ul: assembly('ul'),\n    Var: assembly('var'), // First capital\n    video: assembly('video'),\n\n    // SVG Elements.\n    svg: assembly('svg', true),\n    altGlyph: assembly('altGlyph', true),\n    altGlyphDef: assembly('altGlyphDef', true),\n    altGlyphItem: assembly('altGlyphItem', true),\n    animate: assembly('animate'),\n    animateColor: assembly('animateColor', true),\n    animateMotion: assembly('animateMotion', true),\n    animateTransform: assembly('animateTransform', true),\n    animation: assembly('animation', true),\n    circle: assembly('circle', true),\n    clipPath: assembly('clipPath', true),\n    colorProfile: assembly('color-profile', true), // color-profile\n    cursor: assembly('cursor', true),\n    defs: assembly('defs', true),\n    desc: assembly('desc', true),\n    discard: assembly('discard', true),\n    ellipse: assembly('ellipse', true),\n    feBlend: assembly('feBlend', true),\n    feColorMatrix: assembly('feComposite', true),\n    feComponentTransfer: assembly('feComponentTransfer', true),\n    feComposite: assembly('feComposite', true),\n    feConvolveMatrix: assembly('feConvolveMatrix', true),\n    feDiffuseLighting: assembly('feDiffuseLighting', true),\n    feDisplacementMap: assembly('feDistantLight', true),\n    feDistantLight: assembly('feDistantLight', true),\n    feDropShadow: assembly('feDropShadow', true),\n    feFlood: assembly('feFlood', true),\n    feFuncA: assembly('feFuncA', true),\n    feFuncB: assembly('feFuncB', true),\n    feFuncG: assembly('feFuncG', true),\n    feFuncR: assembly('feFuncR', true),\n    feGaussianBlur: assembly('feGaussianBlur', true),\n    feImage: assembly('feImage', true),\n    feMerge: assembly('feMerge', true),\n    feMergeNode: assembly('feMergeNode', true),\n    feMorphology: assembly('feMorphology', true),\n    feOffset: assembly('feOffset', true),\n    fePointLight: assembly('fePointLight', true),\n    feSpecularLighting: assembly('feSpecularLighting', true),\n    feSpotLight: assembly('feSpotLight', true),\n    feTile: assembly('feTile', true),\n    feTurbulence: assembly('feTurbulence', true),\n    filter: assembly('filter', true),\n    font: assembly('font', true),\n    fontFace: assembly('font-face', true), // fontFace\n    fontFaceFormat: assembly('font-face-format', true), // fontFaceFormat\n    fontFaceName: assembly('font-face-name', true), // fontFaceName\n    fontFaceSrc: assembly('font-face-src', true), // fontFaceSrc\n    fontFaceUri: assembly('font-face-uri', true), // fontFaceUri\n    foreignObject: assembly('foreignObject', true),\n    g: assembly('g', true),\n    glyph: assembly('glyph', true),\n    glyphRef: assembly('glyphRef', true),\n    handler: assembly('handler', true),\n    hatch: assembly('hatch', true),\n    hatchpath: assembly('hatchpath', true),\n    hkern: assembly('hkern', true),\n    image: assembly('image', true),\n    line: assembly('line', true),\n    linearGradient: assembly('linearGradient', true),\n    listener: assembly('listener'),\n    marker: assembly('marker', true),\n    mask: assembly('mask', true),\n    mesh: assembly('mesh', true),\n    meshgradient: assembly('meshgradient', true),\n    meshpatch: assembly('meshpatch', true),\n    meshrow: assembly('meshrow', true),\n    metadata: assembly('metadata', true),\n    missingGlyph: assembly('missing-glyph', true), // missing-glyph\n    mpath: assembly('mpath', true),\n    path: assembly('path', true),\n    pattern: assembly('pattern', true),\n    polygon: assembly('polygon', true),\n    polyline: assembly('polyline', true),\n    prefetch: assembly('prefetch', true),\n    radialGradient: assembly('radialGradient', true),\n    rect: assembly('rect', true),\n    set: assembly('set', true),\n    solidColor: assembly('solidColor', true),\n    solidcolor: assembly('solidcolor', true),\n    Stop: assembly('stop', true), // First capital\n    Switch: assembly('switch', true), // First capital\n    symbol: assembly('symbol', true),\n    tbreak: assembly('tbreak', true),\n    text: assembly('text', true),\n    textArea: assembly('textArea', true),\n    textPath: assembly('textPath', true),\n    tref: assembly('tref', true),\n    tspan: assembly('tspan', true),\n    unknown: assembly('unknown', true),\n    use: assembly('use', true),\n    view: assembly('view', true),\n    vkern: assembly('vkern', true)\n})\n\nexport default tags;"],"names":["isPlaneObject","value","toString","call","isString","isPrimitive","isElement","Element","isVNode","hasOwnProperty","removeChildren","parentNode","firstChild","removeChild","filter","arr","callback","store","arrLength","length","i","push","insertBefore","parent","newNode","refNode","insertAfter","newElement","lastChild","appendChild","nextSibling","cache","fragment","document","createDocumentFragment","SVG_NAMESPACE","node","t","at","ch","isSVG","val","assembly","tagName","nodeType","inner","args","tagNameStr","attributes","item","childNodes","argsLength","isItemObject","isItemVnode","Array","isArray","Node","el","childNode","type","slice","ix","render","initalRootElement","vNode","isPartial","rootElement","renderFragment","vDOM","dummyVDOM","dummy","firstElementChild","innerNodes","from","innerNodesLength","outerNodeList","fragmentClone","importNode","createAndAppendNode","frag","svg","textNode","createTextNode","commentNode","createComment","notAnElement","element","createElementNS","createElement","attributeKeys","Object","keys","attributesLength","attributeKey","indexOf","dataKey","replace","dataset","cleanKey","attributeValue","addEventListener","assign","style","className","class","setAttribute","forEach","ibIa1","queriedParent","newDOMNode","parentElement","ibIa2","childNodesLength","offset","children","index","r1","selector","CMDHasMany","querySelectorAll","childrenLength","clones","cloneNode","innerHTML","replaceWith","replaceChild","r2","replaceNode","query","child","querySelector","childRelative","rm","removeType","backgroundColor","log","remove","matchingSelectors","matchingSelectorsLength","j","previousSibling","updateCachedFragmentByCommand","CMD","CMDList","split","CMDListLength","lastCommand","thirdCommand","secondCommand","action","insert","childLengthAsIndex","hasOffset","initialOffset","parseInt","hasIndex","initalIndex","hasQuery","CMDcode","join","ibIa","r","updateCachedFragment","newVNode","parts","hasCommand","command","cachedNode","undefined","partialRenderInner","partialNodes","partialNodesKeys","partialNodesLength","partialNodeKey","partialRender","all","initialize","rootSelector","container","initalVNode","Error","or","vNodes","conditions","exclude","filteredVNodes","filteredIndexes","toggle","classes","e","classesLength","ids","tags","test","indexes","vNodesLength","includes","c","id","toUpperCase","x","indexList","Set","loop","data","groupVnodes","hasNumber","loopedVnodes","singleVnode"],"mappings":"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"}